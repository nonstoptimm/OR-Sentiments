lda_samsung_wtp_topTerms <- LDATopTerms(lda_samsung_wtp)
lda_toaster_wtp_topTerms <- LDATopTerms(lda_toaster_wtp)
lda_coffee_wtp_topTerms <- LDATopTerms(lda_coffee_wtp)
LDATopTerms <- function(input) {
input %>%
group_by(topic) %>%
top_n(5, beta) %>%
ungroup() %>%
arrange(topic, -beta)
}
# Apply LDATopTerms Function
lda_cellphone_wtp_topTerms <- LDATopTerms(lda_cellphone_wtp)
lda_apple_wtp_topTerms <- LDATopTerms(lda_apple_wtp)
lda_samsung_wtp_topTerms <- LDATopTerms(lda_samsung_wtp)
lda_toaster_wtp_topTerms <- LDATopTerms(lda_toaster_wtp)
lda_coffee_wtp_topTerms <- LDATopTerms(lda_coffee_wtp)
plotLDATopTerms(lda_toaster_wtp_topTerms, "Toaster")
plotLDATopTerms <- function(input, topic) {
input %>%
mutate(term = reorder(term, beta)) %>%
ggplot(aes(term, beta, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
coord_flip() +
ggtitle(paste("Topic Modeling on", topic, sep = " "))
}
plotLDATopTerms(lda_toaster_wtp_topTerms, "Toaster")
plotLDATopTerms(lda_coffee_wtp_topTerms, "Coffee")
plotLDATopTerms(lda_toaster_wtp_topTerms, "Toaster")
plotLDATopTerms(lda_samsung_wtp_topTerms, "Phones, Brand Samsung")
plotLDATopTerms(lda_apple_wtp_topTerms, "Phones, Brand Apple")
# Apply plotLDATopTerms Function
plotLDATopTerms(lda_cellphone_wtp_topTerms, "Phones")
merged_topic_cellphone %>% filter(brand == "apple") %>% summarise(mean(TS1))
merged_topic_cellphone %>% filter(brand == "apple") %>% summarise(mean(TS2))
merged_topic_cellphone %>% filter(brand == "apple") %>% summarise(mean(TS3))
merged_topic_cellphone %>% filter(brand == "apple") %>% summarise(mean(TS4))
merged_topic_cellphone %>% filter(brand == "apple") %>% summarise(mean(TS5))
merged_topic_cellphone %>% filter(brand == "samsung") %>% summarise(mean(TS1))
merged_topic_cellphone %>% filter(brand == "samsung") %>% summarise(mean(TS2))
merged_topic_cellphone %>% filter(brand == "samsung") %>% summarise(mean(TS3))
merged_topic_cellphone %>% filter(brand == "samsung") %>% summarise(mean(TS4))
merged_topic_cellphone %>% filter(brand == "samsung") %>% summarise(mean(TS5))
merged_topic_cellphone %>% filter(brand == "sony") %>% summarise(mean(TS5))
merged_topic_cellphone %>% filter(brand == "sony") %>% summarise(mean(TS4))
merged_topic_cellphone %>% filter(brand == "sony") %>% summarise(mean(TS3))
merged_topic_cellphone %>% filter(brand == "sony") %>% summarise(mean(TS2))
merged_topic_cellphone %>% filter(brand == "sony") %>% summarise(mean(TS1))
merged_topic_cellphone %>% filter(brand == "ocean cross") %>% summarise(mean(TS1))
merged_topic_cellphone %>% filter(brand == "ocean cross") %>% summarise(mean(TS2))
merged_topic_cellphone %>% filter(brand == "ocean cross") %>% summarise(mean(TS3))
merged_topic_cellphone %>% filter(brand == "ocean cross") %>% summarise(mean(TS4))
merged_topic_cellphone %>% filter(brand == "ocean cross") %>% summarise(mean(TS5))
merged_topic_cellphone %>% filter(brand == "lenovo") %>% summarise(mean(TS5))
merged_topic_cellphone %>% filter(brand == "lenovo") %>% summarise(mean(TS4))
merged_topic_cellphone %>% filter(brand == "lenovo") %>% summarise(mean(TS3))
merged_topic_cellphone %>% filter(brand == "lenovo") %>% summarise(mean(TS2))
merged_topic_cellphone %>% filter(brand == "lenovo") %>% summarise(mean(TS1))
merged_topic_cellphone %>% filter(brand == "lenovo") %>% summarise(mean(scoreNN))
merged_topic_cellphone %>% filter(brand == "ocean cross") %>% summarise(mean(scoreNN))
merged_topic_cellphone %>% filter(brand == "google") %>% summarise(mean(scoreNN))
merged_topic_cellphone %>% filter(brand == "google") %>% summarise(mean(scoreNN))
merged_topic_cellphone %>% summarise(mean(TS5))
merged_topic_cellphone %>% summarise(mean(TS4))
merged_topic_cellphone %>% summarise(mean(TS3))
merged_topic_cellphone %>% summarise(mean(TS2))
merged_topic_cellphone %>% summarise(mean(TS1))
merged_topic_cellphone %>% filter(brand == "lenovo") %>% summarise(mean(TS1))
merged_topic_cellphone %>% filter(brand == "lenovo") %>% summarise(mean(TS2))
merged_topic_cellphone %>% filter(brand == "lenovo") %>% summarise(mean(TS3))
merged_topic_cellphone %>% filter(brand == "lenovo") %>% summarise(mean(TS4))
merged_topic_cellphone %>% filter(brand == "lenovo") %>% summarise(mean(TS5))
merged_topic_cellphone %>% filter(brand == "google") %>% summarise(mean(TS5))
merged_topic_cellphone %>% filter(brand == "google") %>% summarise(mean(TS3))
merged_topic_cellphone %>% filter(brand == "google") %>% summarise(mean(TS4))
merged_topic_cellphone %>% filter(brand == "google") %>% summarise(mean(TS2))
merged_topic_cellphone %>% filter(brand == "google") %>% summarise(mean(TS1))
merged_topic_cellphone %>% filter(brand == "samsung") %>% summarise(mean(TS1))
merged_topic_cellphone %>% filter(brand == "samsung") %>% summarise(mean(TS2))
merged_topic_cellphone %>% filter(brand == "samsung") %>% summarise(mean(TS3))
merged_topic_cellphone %>% filter(brand == "samsung") %>% summarise(mean(TS4))
merged_topic_cellphone %>% filter(brand == "samsung") %>% summarise(mean(TS5))
merged_topic_cellphone %>% filter(brand == "apple") %>% summarise(mean(TS5))
merged_topic_cellphone %>% filter(brand == "apple") %>% summarise(mean(TS4))
merged_topic_cellphone %>% filter(brand == "apple") %>% summarise(mean(TS3))
merged_topic_cellphone %>% filter(brand == "apple") %>% summarise(mean(TS2))
merged_topic_cellphone %>% filter(brand == "apple") %>% summarise(mean(TS1))
LDATopTerms <- function(input) {
input %>%
group_by(topic) %>%
top_n(7, beta) %>%
ungroup() %>%
arrange(topic, -beta)
}
# Apply LDATopTerms Function
lda_cellphone_wtp_topTerms <- LDATopTerms(lda_cellphone_wtp)
lda_apple_wtp_topTerms <- LDATopTerms(lda_apple_wtp)
lda_samsung_wtp_topTerms <- LDATopTerms(lda_samsung_wtp)
lda_toaster_wtp_topTerms <- LDATopTerms(lda_toaster_wtp)
lda_coffee_wtp_topTerms <- LDATopTerms(lda_coffee_wtp)
# Apply plotLDATopTerms Function
plotLDATopTerms(lda_cellphone_wtp_topTerms, "Phones")
LDATopTerms <- function(input) {
input %>%
group_by(topic) %>%
top_n(10, beta) %>%
ungroup() %>%
arrange(topic, -beta)
}
# Apply LDATopTerms Function
lda_cellphone_wtp_topTerms <- LDATopTerms(lda_cellphone_wtp)
lda_apple_wtp_topTerms <- LDATopTerms(lda_apple_wtp)
lda_samsung_wtp_topTerms <- LDATopTerms(lda_samsung_wtp)
lda_toaster_wtp_topTerms <- LDATopTerms(lda_toaster_wtp)
lda_coffee_wtp_topTerms <- LDATopTerms(lda_coffee_wtp)
# Apply plotLDATopTerms Function
plotLDATopTerms(lda_cellphone_wtp_topTerms, "Phones")
merged_topic_cellphone %>% filter(brand == "apple") %>% summarise(mean(overall))
merged_topic_cellphone %>% filter(brand == "google") %>% summarise(mean(overall))
merged_topic_cellphone %>% filter(brand == "apple") %>% summarise(mean(overall))
merged_topic_cellphone %>% filter(brand == "samsung") %>% summarise(mean(overall))
merged_topic_cellphone %>% filter(brand == "lenovo") %>% summarise(mean(overall))
merged_topic_cellphone %>% filter(brand == "ocean cross") %>% summarise(mean(overall))
merged_topic_cellphone %>% filter(brand == "ocean cross") %>% summarise(mean(price))
merged_topic_cellphone %>% filter(brand == "apple") %>% summarise(mean(price))
merged_topic_cellphone %>% filter(brand == "apple") %>% summarise(mean(na.omit(price)))
merged_topic_cellphone %>% filter(brand == "samsung") %>% summarise(mean(na.omit(price)))
merged_topic_cellphone %>% filter(brand == "lenovo") %>% summarise(mean(na.omit(price)))
merged_topic_cellphone %>% filter(brand == "google") %>% summarise(mean(na.omit(price)))
merged_topic_cellphone %>% summarise(mean(na.omit(price)))
merged_topic_cellphone %>% summarise(mean(overall))
merged_topic_cellphone %>% group_by(brand) %>% summarise(mean(brand))
merged_topic_cellphone %>% group_by(brand) %>% summarise(mean = mean(brand))
merged_topic_cellphone %>% group_by(brand) %>% summarise(mean = mean(TS1))
merged_topic_cellphone %>% group_by(brand) %>% summarise(mean = mean(TS1)) %>% arrange(desc(mean))
merged_topic_cellphone %>% group_by(brand) %>% summarise(mean = mean(scoreNN)) %>% arrange(desc(mean))
merged_topic_cellphone %>% group_by(brand) %>% summarise(mean = mean(scoreNN)) %>% arrange(desc(mean))
merged_topic_cellphone %>% group_by(brand) %>% summarise(mean = mean(scoreNN)) %>% arrange(desc(mean))
merged_topic_cellphone %>% group_by(brand) %>% summarise(mean = mean(TS1)) %>% arrange(desc(mean))
plotNotWords(tokenized_bigram_counts(merged_topic_toaster, ""), "Toaster")
sentiContributionPlot(sentiContributions(tokenized_toaster), "Toaster")
merged_topic_cellphone %>% filter(brand == "google") %>% select(review, T1, T2, T3, T4, T5)
merged_topic_cellphone %>% filter(brand == "google") %>% select(review, TS1, TS2, TS3, TS4, TS5)
merged_topic_cellphone %>% filter(brand == "google") %>% select(review, Topic1, Topic2, Topic3, Topic4, Topic5)
merged_topic_cellphone %>% filter(brand == "apple") %>% select(review, Topic1, Topic2, Topic3, Topic4, Topic5)
merged_topic_cellphone$review[165]
merged_topic_cellphone$review[164]
score_headphone1 <- fread("input-data/score_headphone1.csv", showProgress = TRUE)
score_headphone2 <- fread("input-data/score_headphone2.csv", showProgress = TRUE)
score_headphone3 <- fread("input-data/score_headphone3.csv", showProgress = TRUE)
score_headphone4 <- fread("input-data/score_headphone4.csv", showProgress = TRUE)
score_headphone <- rbind_list(score_headphone1, score_headphone2, score_headphone3, score_headphone4)
score_headphone <- rbind(score_headphone1, score_headphone2, score_headphone3, score_headphone4)
prep_headphone_brand <- fread("input-data/prep_headphone_brand.csv", showProgress = TRUE)
rm(score_headphone1)
rm(score_headphone2)
rm(score_headphone3)
rm(score_headphone4)
score_headphone[50000:50001]
score_headphone <- score_headphone[50000:50001,]
score_headphone1 <- fread("input-data/score_headphone1.csv", showProgress = TRUE)
> score_headphone2 <- fread("input-data/score_headphone2.csv", showProgress = TRUE)
> score_headphone3 <- fread("input-data/score_headphone3.csv", showProgress = TRUE)
> score_headphone4 <- fread("input-data/score_headphone4.csv", showProgress = TRUE)
score_headphone1 <- fread("input-data/score_headphone1.csv", showProgress = TRUE)
score_headphone2 <- fread("input-data/score_headphone2.csv", showProgress = TRUE)
score_headphone3 <- fread("input-data/score_headphone3.csv", showProgress = TRUE)
score_headphone4 <- fread("input-data/score_headphone4.csv", showProgress = TRUE)
score_headphone <- rbind(score_headphone1, score_headphone2, score_headphone3, score_headphone4)
rm(score_headphone4)
rm(score_headphone3)
rm(score_headphone2)
rm(score_headphone1)
score_headphone <- score_headphone[-50001,]
fwrite(score_headphone, "input-data/score_headphone.csv")
score_headphone[50000:50001]
prep_cellphone_brand$scoreNN <- addSentiScore(score_cellphone)
addSentiScore <- function(sentiment) {
scoreRounded <- round(sentiment$Score, 5)
return(scoreRounded)
}
prep_headphone_brand$scoreNN <- addSentiScore(score_headphone)
score_headphone <- fread("input-data/score_headphone.csv", showProgress = TRUE)
prep_headphone_brand$scoreNN <- addSentiScore(score_headphone)
names(prep_headphone_brand)
fwrite(prep_headphone_brand, "input-data/prep_headphone_brand.csv")
# Calculate Means for Sentiment Scores
# Cellphone
calcMeanScore(prep_cellphone_brand)
# Calculate Means for Sentiment Scores
# Cellphone
calcMeanScore(merged_topic_cellphone)
# fwrite(calcMeanScore(merged_topic_coffee), "output/mean_coffee.csv")
# Headphone
calcMeanScore(prep_headphone_brand)
#fwrite(calcVarScore(prep_coffee_brand), "output/var_coffee.csv")
# Headphone
calcVarScore(prep_headphone_brand)
#fwrite(corrCoeff(prep_coffee_brand), "output/cor_coffee.csv")
# Headphone
corrCoeff(prep_headphone_brand)
#fwrite(corrCoeff(prep_toaster_brand), "output/cor_toaster.csv")
# Coffee
corrCoeff(prep_coffee_brand)
# Headphone
calcMeanScoreBrand(prep_headphone_brand, "")
# Headphone
calcMeanScoreBrand(prep_headphone_brand, "beats")
# Headphone
calcMeanScoreBrand(prep_headphone_brand, "sennheiser")
# Headphone
calcMeanScoreBrand(prep_headphone_brand, "akg")
# Headphone
calcMeanScoreBrand(prep_headphone_brand, "sony")
dtm_headphone_brand  <- prep_headphone_brand
tokenized_headphone <- tokenizeReview(prep_headphone_brand)
tokenized_headphone <- removeStopwords(tokenized_headphone)
# Apply to tokenized dataset
countWordsHeadphone <- countWords(tokenized_headphone)
countWordsHeadphone
wf_headphone <- countWordsUnw(tokenized_headphone, c("headphone"))
wf_headphone_brand <- countWordsBrand(tokenized_toaster, c("headphone", "buy"))
wf_headphone_category <- countWordsCategory(tokenized_headphone, c("headphone", "buy"))
wf_headphone_category
wf_headphone_brand
wf_headphone_brand <- countWordsBrand(tokenized_headphone, c("headphone", "buy"))
wf_headphone_category
tf_idf_general(countWordsHeadphone)
getSentiment(tokenized_headphone, "bing")
getSentiment(tokenized_cellphone, "bing")
getSentiment(tokenized_headphone, "bing")
getSentiment(tokenized_headphone, "nrc")
plotHistogram(prep_headphone_brand, "Headphone Reviews")
tokenized_headphone_bigram <- tokenizeBigram(prep_headphone_brand)
countBigram(tokenized_headphone_bigram)
tokenized_headphone_bigram <- separateBigrams(tokenized_headphone_bigram)
tokenized_headphone_bigram_filtered <- filterBigrams(tokenized_headphone_bigram)
tokenized_headphone_bigram_united <- uniteBigrams(tokenized_headphone_bigram_filtered)
countBigramHeadphone <- CountBigram(tokenized_headphone_bigram_united)
countBigramHeadphone <- countBigram(tokenized_headphone_bigram_united)
countBigramHeadphone
filterBigramNotHeadphone <- filterBigramNot(tokenized_headphone_bigram)
filterBigramNotHeadphone
tokenized_bigram_counts_headphone <- tokenized_bigram_counts(prep_headphone_brand, "")
tokenized_bigram_counts_headphone
rm(tokenized_bigram_counts_headphone)
# Apply it to the datasets
plotNotWords(tokenized_bigram_counts(prep_headphone_brand, ""), "Headphones")
# Apply it to the datasets
plotNotWords(tokenized_bigram_counts(prep_headphone_brand, "beats"), "Headphones")
# fwrite(calcMeanScore(merged_topic_coffee), "output/mean_coffee.csv")
# Headphone
calcMeanScore(prep_headphone_brand)
#fwrite(calcVarScore(prep_coffee_brand), "output/var_coffee.csv")
# Headphone
calcVarScore(prep_headphone_brand)
# Headphone
calcSdScore(prep_headphone_brand)
#fwrite(corrCoeff(prep_coffee_brand), "output/cor_coffee.csv")
# Headphone
corrCoeff(prep_headphone_brand)
names(dtm_samsung)
names(dtm_cellphone_brand)
# Headphone
calcMeanScoreBrand(prep_headphone_brand, "beats")
#fwrite(calcVarScoreBrand(prep_coffee_brand, ""), "output/var_coffee.csv")
# Headphone
calcVarScoreBrand(prep_headphone_brand, "beats")
#fwrite(calcVarScoreBrand(prep_coffee_brand, ""), "output/var_coffee.csv")
# Headphone
calcVarScoreBrand(prep_headphone_brand, "sennheiser")
# Toaster
# calcSdScoreBrand(prep_toaster_brand, "")
# Coffee
# calcSdScoreBrand(prep_coffee_brand, "")
# Headphone
calcSdScoreBrand(prep_headphone_brand, "beats")
# Toaster
# calcSdScoreBrand(prep_toaster_brand, "")
# Coffee
# calcSdScoreBrand(prep_coffee_brand, "")
# Headphone
calcSdScoreBrand(prep_headphone_brand, "sennheiser")
# Headphone
calcMeanScoreBrand(prep_headphone_brand, "beats")
# Headphone
calcMeanScoreBrand(prep_headphone_brand, "sennheiser")
#fwrite(calcVarScoreBrand(prep_cellphone_brand, "apple"), "output/var_cellphone_apple.csv")
calcVarScoreBrand(merged_topic_samsung, "ocean cross")
#fwrite(calcVarScoreBrand(prep_cellphone_brand, "apple"), "output/var_cellphone_apple.csv")
calcVarScoreBrand(dtm_cellphone_brand, "ocean cross")
# Calculate Standard Deviation for Sentiment Scores
# Cellphone
calcSdScoreBrand(dtm_cellphone_brand, "ocean cross")
plot(dtm_headphone_brand$overall, dtm_headphone_brand$scoreNN)
dtm_headphone_brand %>% filter(scoreNN > 4)
dtm_headphone_brand %>% filter(scoreNN > 3.9)
dtm_headphone_brand %>% filter(scoreNN < -2)
dtm_headphone_brand %>% filter(overall == 5 & scoreNN < -2)
# Calculate Variance Deviation for Sentiment Scores
# Cellphones
calcVarScore(merged_topic_cellphone)
?knn
library("knn")
?read.txt
?read_file
read.table("inputd-data/wineequality.txt", stringsAsFactors = TRUE)
winequality <- read.table("inputd-data/winequality.txt", stringsAsFactors = TRUE)
winequality <- read.table("input-data/winequality.txt", stringsAsFactors = TRUE)
View(winequality)
glimpse(winequality)
validation <- read.table("input-data/validation.txt", stringsAsFactors = TRUE)
glimpse(validation)
winequality <- read.table("input-data/winequality.txt", stringsAsFactors = FALSE)
validation <- read.table("input-data/validation.txt", stringsAsFactors = FALSE)
winequality <- read.table("input-data/winequality.txt", stringsAsFactors = FALSE)
glimpse(validation)
winequality <- read.table("input-data/winequality.txt", stringsAsFactors = FALSE)
winequality$V12 <- as.factor(winequality$V12)
glimpse(validation)
glimpse(winequality)
round(prop.table(table(winequality$V12)) * 100, digits = 1)
return ((x - min(x)) / (max(x) - min(x))) }
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x))) }
prc_n <- as.data.frame(lapply(winequality[1:11], normalize))
prc_n
rm(prc_n)
winequality_n <- as.data.frame(lapply(winequality[1:11], normalize))
validation$V12 <- as.factor(validation$V12)
validation_n <- as.data.frame(lapply(validation[1:11], normalize))
install.package("class")
install.packages("class")
library(class)
prc_test_pred <- knn(train = winequality_n, test = validation_n,cl = winequality[,1], k=10)
prc_test_pred
library(gmodels)
install.packages("gmodels")
sq(1600)
root(1600)
prc_test_pred <- knn(train = winequality_n, test = validation_n,cl = winequality[,1], k=40)
prc_test_pred
?knn
prc_test_pred <- knn(train = winequality_n, test = validation_n,cl = winequality[,11], k=40)
prc_test_pred
prc_test_pred <- knn(train = winequality_n, test = validation_n,cl = winequality_n[,11], k=40)
prc_test_pred
library(gmodels)
CrossTable(x = validation_n[,11], y = prc_test_pred, prop.chisq = FALSE)
result_predict <- CrossTable(x = validation_n[,11], y = prc_test_pred, prop.chisq = FALSE)
result_predict
prc_test_pred <- knn(train = winequality_n, test = validation_n,cl = winequality[,12], k=40)
prc_test_pred
CrossTable(x = validation[,12], y = prc_test_pred, prop.chisq = FALSE)
prc_test_pred <- knn(train = winequality_n, test = validation_n,cl = winequality[,12], k=10)
CrossTable(x = validation[,12], y = prc_test_pred, prop.chisq = FALSE)
prc_test_pred <- knn(train = winequality_n, test = validation_n,cl = winequality[,12], k=40)
CrossTable(x = validation[,12], y = prc_test_pred, prop.chisq = FALSE)
prc_test_pred <- knn(train = winequality_n, test = validation_n,cl = winequality[,12], k=40)
CrossTable(x = validation[,12], y = prc_test_pred, prop.chisq = FALSE)
prc_test_pred <- knn(train = winequality_n, test = validation_n,cl = winequality[,12], k=30)
CrossTable(x = validation[,12], y = prc_test_pred, prop.chisq = FALSE)
prc_test_pred <- knn(train = winequality_n, test = validation_n,cl = winequality[,12], k=1)
CrossTable(x = validation[,12], y = prc_test_pred, prop.chisq = FALSE)
prc_test_pred <- knn(train = winequality_n, test = validation_n,cl = winequality[,12], k=50)
CrossTable(x = validation[,12], y = prc_test_pred, prop.chisq = FALSE)
prc_test_pred <- knn(train = winequality_n, test = validation_n,cl = winequality[,12], k=60)
CrossTable(x = validation[,12], y = prc_test_pred, prop.chisq = FALSE)
seeds <- read.table("input-data/seeds.txt", stringsAsFactors = FALSE)
head(seeds)
names(seeds) <- c("area", "perimeter", "compactness", "lengthOfKernel", "widthOfKernel", "asymmetryCoefficient", "lengthOfKernelGroove")
head(seeds)
head(seeds
)
seeds_pca <- princomp(seeds, cor = TRUE, score = TRUE)
summary(seeds_pca)
plot(seeds_pca)
biplot(seeds_pca)
attributes(seeds_pca)
seeds_pca
library(stats)
seeds_pca <- princomp(seeds, cor = TRUE)
biplot(seeds_pca)
attributes(seeds_pca)
seeds_pca
summary(seeds_pca)
View(seeds)
is.na(seeds)
summary(is.na(seeds))
is.na(seeds)
seeds_pca
seeds_pca$scores
biplot(seeds_pca)
seeds_mds <- cmdscale(seeds, eig = TRUE, k = 2)
seeds
seeds_mds <- cmdscale(seeds, eig = TRUE, k = 2)
names(seeds)
dist(seeds)
seeds_mds <- cmdscale(dist(seeds), eig = TRUE, k = 2)
biplot(seeds_mds)
seeds_mds
seeds_mds$points[,1]
plot(seeds_mds$points[,1], seeds_mds$points[,2], pch = 19, xlim = range(x) + c(0, 600))
seeds_mds$points[,2]
plot(x = seeds_mds$points[,1], y = seeds_mds$points[,2], pch = 19, xlim = range(x) + c(0, 600))
x = seeds_mds$points[,1]
y = seeds_mds$points[,2]
plot(x, y, pch = 19, xlim = range(x) + c(0, 600))
plot(x, y, pch = 19)
plot(x, y, pch = 19,type="n")
plot(x, y, type="n")
plot(x, y)
text(x, y, labels = row.names(seeds), cex=.7)
winequality <- read.table("input-data/winequality.txt", stringsAsFactors = TRUE)
glimpse(winequality)
biplot(seeds_mds)
biplot(seeds_pca)
CrossTable(x = validation[,12], y = prc_test_pred, prop.chisq = FALSE)
prc_test_pred <- knn(train = winequality_n, test = validation_n,cl = winequality[,12], k=40)
CrossTable(x = validation[,12], y = prc_test_pred, prop.chisq = FALSE)
prc_test_pred <- knn(train = winequality_n, test = validation_n,cl = winequality[,12], k=10)
CrossTable(x = validation[,12], y = prc_test_pred, prop.chisq = FALSE)
prc_test_pred <- knn(train = winequality_n, test = validation_n,cl = winequality[,12], k=1)
CrossTable(x = validation[,12], y = prc_test_pred, prop.chisq = FALSE)
prc_test_pred <- knn(train = winequality_n, test = validation_n,cl = winequality[,12], k=4)
CrossTable(x = validation[,12], y = prc_test_pred, prop.chisq = FALSE)
dtm_headphone_brand %>% filter(scoreNN > 4)
dtm_headphone_brand %>% filter(scoreNN > 4 & overall == 1)
dtm_headphone_brand %>% filter(scoreNN > 3.8 & overall == 1)
dtm_headphone_brand %>% filter(scoreNN > 3.85& overall == 1)
dtm_headphone_brand %>% filter(scoreNN > 3.5 & overall == 1)
dtm_headphone_brand %>% filter(scoreNN > 3 & overall == 1)
dtm_headphone_brand %>% filter(scoreNN > 2 & overall == 1)
dtm_headphone_brand %>% filter(scoreNN > 1 & overall == 1)
plot(dtm_headphone_brand$overall, dtm_headphone_brand$scoreNN)
dtm_cellphone_brand %>% filter(scoreNN > 2 & overall == 1)
dtm_cellphone_brand %>% filter(scoreNN > 1 & overall == 1)
dtm_cellphone_brand %>% filter(scoreNN > 1 & overall == 1) %>% select(review)
plot(dtm_cellphone_brand$overall, dtm_cellphone_brand$scoreNN)
dtm_cellphone_brand %>% filter(scoreNN > 0.8 & overall == 1) %>% select(review)
dtm_cellphone_brand %>% filter(scoreNN > 0.8 & overall = 1) %>% select(review)
dtm_cellphone_brand %>% filter(scoreNN > 0.8 & overall == 1) %>% select(review)
dtm_cellphone_brand %>% filter(scoreNN > 0 & overall == 1) %>% select(review)
dtm_cellphone_brand %>% filter(scoreNN > 0.8 & overall == 1) %>% select(review, document)
dtm_cellphone_brand %>% filter(scoreNN > 0 & overall == 1) %>% select(review)
dtm_cellphone_brand %>% filter(scoreNN > 0 & overall == 1) %>% select(review, document)
dtm_cellphone_brand %>% filter(scoreNN > 0 & overall == 1) %>% select(review)
dtm_cellphone_brand %>% filter(scoreNN > 0 & overall == 1) %>% select(review)
dtm_cellphone_brand %>% filter(scoreNN > 0 & overall == 1) %>% select(review, document)
prep_headphone_brand %>% filter(asin == "B00F3J4B5S" & reviewerID == "AZG324CQ94D1M")
head(prep_headphone_brand)
prep_cellphone_brand %>% filter(asin == "B00F3J4B5S" & reviewerID == "AZG324CQ94D1M")
prep_headphone_brand %>% filter(brand == "beats") %>% summarise(cor = cor(overall, scoreNN))
prep_headphone_brand %>% filter(brand == "sennheiser") %>% summarise(cor = cor(overall, scoreNN))
normalized_score <- normalize(prep_headphone_brand$scoreNN)
head(normalized_score)
normalized_star <- normalize(prep_headphone_brand$overall)
cor(normalized_star, normalized_score)
rm(normalized_star)
rm(normalized_score)
normalized_star <- normalize(prep_headphone_brand$overall)
normalized_score <- normalize(prep_headphone_brand$scoreNN)
plot(normalized_score, normalized_star)
plot(normalized_score, normalized_star)
plot(normalized_star, normalized_score)
abline(lm(normalized_star~normalized_score), col="red") #
regression line (y ~x)
regression line (y ~ x)
regressionline (y ~ x)
lines(loewss(normalized_score, normalized_star), col = "blue")
lines(lowess(normalized_score, normalized_star), col = "blue")
shapiro.test(normalized_star)
shapiro.test(normalized_star[sample(10,100)],)
shapiro.test(normalized_star[sample(10,100),])
shapiro.test(normalized_star[sample(5000),])
shapiro.test(normalized_star[sample(5000,210372),])
shapiro.test(sample(normalized_score, 5000, replace = FALSE))
shapiro.test(sample(normalized_star, 5000, replace = FALSE))
t.test(sample(normalized_star, 5000, replace = FALSE))
t.test(sample(normalized_star, 5000, replace = FALSE))
t.test(sample(normalized_star, 200, replace = FALSE))
t.test(sample(normalized_star, 20, replace = FALSE))
t.test(sample(normalized_star, ^0, replace = FALSE))
t.test(sample(normalized_star, 10, replace = FALSE))
t.test(sample(normalized_star, 5, replace = FALSE))
t.test(sample(normalized_star, 8, replace = FALSE))
t.test(sample(normalized_star, 20, replace = FALSE))
biplot(seeds_pca)
biplot(seeds_pca, scale=0, cex=.7)
biplot(seeds_pca)
pca.out <- seeds_pca
pca.out$rotation <- -pca.out$rotation
pca.out$x <- -pca.out$x
biplot(pca.out,scale=0, cex=.7)
seeds_pca$rotation
prcomp(seeds,center = TRUE,scale. = TRUE)
seeds_pca <- prcomp(seeds,center = TRUE,scale. = TRUE)
names(seeds_pca)
pca.out <- seeds_pca
pca.out$rotation <- -pca.out$rotation
pca.out$x <- -pca.out$x
biplot(pca.out,scale=0, cex=.7)
biplot(pca.out,scale=0, cex=.7)
biplot(pca.out,scale=0)
seeds_pca <- prcomp(seeds,center = TRUE)
biplot(seeds_pca,scale=0)
biplot(pca.out,scale=0, cex=.7)
seeds_pca <- prcomp(seeds,center = TRUE,scale. = TRUE)
biplot(seeds_pca,scale=0, cex=.7)
seeds_pca <- prcomp(seeds,center = TRUE)
names(seeds)
names(seeds_pca)
