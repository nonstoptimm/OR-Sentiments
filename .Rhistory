ggtitle(paste("Topic-oriented Sentiment-Score for", brand, category, sep = " ")) +
ylim(-3, 3)
}
}
# Apply topicBoxplot-function
topicBoxplot(merged_topic_cellphone, "Cellphones", "apple")
# CREATE BOXPLOT FOR TOPIC-SENTIMENT
topicBoxplot <- function(input, category, brand){
input$mainTopic <- as.factor(input$mainTopic)
if(brand == ""){
ggplot(input) +
aes(x=mainTopic, y=scoreNN) +
geom_boxplot() +
ggtitle(paste("Topic-oriented Sentiment-Score", category, sep = " ")) +
ylim(-3, 3)
} else {
input %>%
filter(brand == brand) %>%
ggplot(input) +
aes(x=mainTopic, y=scoreNN) +
geom_boxplot() +
ggtitle(paste("Topic-oriented Sentiment-Score for", brand, category, sep = " ")) +
ylim(-3, 3)
}
}
# Apply topicBoxplot-function
topicBoxplot(merged_topic_cellphone, "Cellphones", "apple")
# CREATE BOXPLOT FOR TOPIC-SENTIMENT
topicBoxplot <- function(input, category, brand){
input$mainTopic <- as.factor(input$mainTopic)
input <- input %>%
filter(brand == brand)
ggplot(input) +
aes(x=mainTopic, y=scoreNN) +
geom_boxplot() +
ggtitle(paste("Topic-oriented Sentiment-Score", category, sep = " ")) +
ylim(-3, 3)
}
# Apply topicBoxplot-function
topicBoxplot(merged_topic_cellphone, "Cellphones", "apple")
# CREATE BOXPLOT FOR TOPIC-SENTIMENT
topicBoxplot <- function(input, category, brand){
input$mainTopic <- as.factor(input$mainTopic)
input <- input %>%
filter(brand == brand)
ggplot(input) +
aes(x=mainTopic, y=scoreNN) +
geom_boxplot() +
ggtitle(paste("Topic-oriented Sentiment-Score", category, sep = " "))
}
# Apply topicBoxplot-function
topicBoxplot(merged_topic_cellphone, "Cellphones", "apple")
# Apply topicBoxplot-function
topicBoxplot(merged_topic_cellphone, "Cellphones", "")
# CREATE BOXPLOT FOR TOPIC-SENTIMENT
topicBoxplot <- function(input, category, brand){
input$mainTopic <- as.factor(input$mainTopic)
plot <- input %>%
filter(brand == brand)
ggplot(plot) +
aes(x=mainTopic, y=scoreNN) +
geom_boxplot() +
ggtitle(paste("Topic-oriented Sentiment-Score", category, sep = " "))
}
# Apply topicBoxplot-function
topicBoxplot(merged_topic_cellphone, "Cellphones", "")
# Apply topicBoxplot-function
topicBoxplot(merged_topic_cellphone, "Cellphones", "samsung")
# Apply topicBoxplot-function
topicBoxplot(merged_topic_cellphone, "Cellphones", "")
merged_topic_cellphone
# CREATE BOXPLOT FOR TOPIC-SENTIMENT
topicBoxplot <- function(input, category, brandSelect){
input$mainTopic <- as.factor(input$mainTopic)
plot <- input %>%
filter(brand == brandSelect)
ggplot(plot) +
aes(x=mainTopic, y=scoreNN) +
geom_boxplot() +
ggtitle(paste("Topic-oriented Sentiment-Score", category, sep = " "))
}
# Apply topicBoxplot-function
topicBoxplot(merged_topic_cellphone, "Cellphones", "")
# CREATE BOXPLOT FOR TOPIC-SENTIMENT
topicBoxplot <- function(input, category, brandSelect){
input$mainTopic <- as.factor(input$mainTopic)
if(!brand == "") {
plot <- input %>%
filter(brand == brandSelect)
}
ggplot(plot) +
aes(x=mainTopic, y=scoreNN) +
geom_boxplot() +
ggtitle(paste("Topic-oriented Sentiment-Score", category, sep = " "))
}
# Apply topicBoxplot-function
topicBoxplot(merged_topic_cellphone, "Cellphones", "")
# CREATE BOXPLOT FOR TOPIC-SENTIMENT
topicBoxplot <- function(input, category, brandSelect){
input$mainTopic <- as.factor(input$mainTopic)
if(!brandSelect == "") {
plot <- input %>%
filter(brand == brandSelect)
}
ggplot(plot) +
aes(x=mainTopic, y=scoreNN) +
geom_boxplot() +
ggtitle(paste("Topic-oriented Sentiment-Score", category, sep = " "))
}
# Apply topicBoxplot-function
topicBoxplot(merged_topic_cellphone, "Cellphones", "")
# CREATE BOXPLOT FOR TOPIC-SENTIMENT
topicBoxplot <- function(input, category, brandSelect){
input$mainTopic <- as.factor(input$mainTopic)
if(brandSelect != "") {
plot <- input %>%
filter(brand == brandSelect)
}
ggplot(plot) +
aes(x=mainTopic, y=scoreNN) +
geom_boxplot() +
ggtitle(paste("Topic-oriented Sentiment-Score", category, sep = " "))
}
# Apply topicBoxplot-function
topicBoxplot(merged_topic_cellphone, "Cellphones", "")
?if
?if (condition) {
}
# CREATE BOXPLOT FOR TOPIC-SENTIMENT
topicBoxplot <- function(input, category, brandSelect){
input$mainTopic <- as.factor(input$mainTopic)
if(brandSelect != "") {
input <- input %>%
filter(brand == brandSelect)
}
ggplot(input) +
aes(x=mainTopic, y=scoreNN) +
geom_boxplot() +
ggtitle(paste("Topic-oriented Sentiment-Score", category, sep = " "))
}
# Apply topicBoxplot-function
topicBoxplot(merged_topic_cellphone, "Cellphones", "")
# Apply topicBoxplot-function
topicBoxplot(merged_topic_cellphone, "Cellphones", "apple")
# Apply topicBoxplot-function
topicBoxplot(merged_topic_cellphone, "Cellphones", "samsung")
# Apply topicBoxplot-function
topicBoxplot(merged_topic_cellphone, "Cellphones", "")
# Apply topicBoxplot-function
topicBoxplot(merged_topic_cellphone, "Cellphones", "apple")
# Apply topicBoxplot-function
topicBoxplot(merged_topic_cellphone, "Cellphones", "lenovo")
# CREATE BOXPLOT FOR TOPIC-SENTIMENT
topicBoxplot <- function(input, category, brandSelect, ylim){
input$mainTopic <- as.factor(input$mainTopic)
if(brandSelect != "") {
input <- input %>%
filter(brand == brandSelect)
}
ggplot(input) +
aes(x=mainTopic, y=scoreNN) +
geom_boxplot() +
ggtitle(paste("Topic-oriented Sentiment-Score", category, sep = " ")) +
ylim(ylim)
}
# Apply topicBoxplot-function
topicBoxplot(merged_topic_cellphone, "Cellphones", "lenovo", c(-3,3))
# Apply topicBoxplot-function
topicBoxplot(merged_topic_cellphone, "Cellphones", "", c(-3,3))
# Apply topicBoxplot-function
topicBoxplot(merged_topic_cellphone, "Cellphones", "", c(-5,5))
# Apply topicBoxplot-function
topicBoxplot(merged_topic_cellphone, "Cellphones", "", c(-5,3))
# Apply topicBoxplot-function
topicBoxplot(merged_topic_cellphone, "Cellphones", "", c(-5,2.8))
# Apply topicBoxplot-function
topicBoxplot(merged_topic_cellphone, "Cellphones", "", c(-5,2.5))
# Apply topicBoxplot-function
topicBoxplot(merged_topic_cellphone, "Cellphones", "", c(-4.75,2.5))
# Apply topicBoxplot-function
topicBoxplot(merged_topic_cellphone, "Cellphones", "", c(-4.5,2.5))
# Apply topicBoxplot-function
topicBoxplot(merged_topic_cellphone, "Cellphones", "", c(-4.3,2.5))
# Apply topicBoxplot-function
topicBoxplot(merged_topic_cellphone, "Cellphones", "", c(-4.2,2.5))
# Apply topicBoxplot-function
topicBoxplot(merged_topic_cellphone, "Cellphones", "", c(-4.3,2.5))
topicBoxplot(merged_topic_cellphone, "Cellphones", "apple", c(-4.3,2.5))
topicBoxplot(merged_topic_cellphone, "Cellphones", "lenovo", c(-4.3,2.5))
topicBoxplot(merged_topic_cellphone, "Cellphones", "sony", c(-4.3,2.5))
google <- merged_topic_cellphone %>% filter(brand == "ocean cross")
topicBoxplot(merged_topic_cellphone, "Cellphones", "ocean cross", c(-4.3,2.5))
topicBoxplot(merged_topic_cellphone, "Cellphones", "motorola", c(-4.3,2.5))
topicBoxplot(merged_topic_cellphone, "Cellphones", "apple", c(-4.3,2.5))
# DETECT MOST COMMON BRANDS
countBrands <- function(input){
input <- input %>%
group_by(brand) %>%
summarise(reviewCount = n(), meanStar = round(mean(overall),2)) %>%
arrange(desc(reviewCount))
return(input[1:10,])
}
# Apply countBrands-function
top10brands_headphone <- countBrands(prep_headphone_brand)
top10brands_cellphone <- countBrands(prep_cellphone_brand)
top10brands_coffee <- countBrands(prep_coffee_brand)
top10brands_toaster <- countBrands(prep_toaster_brand)
top10brands_headphone
top10brands_coffee
top10brands_cellphone
top10brands_toaster
lapply(top10brands_cellphone$brand, function(x) topicBoxplot(merged_topic_headphone, "Headphones", x, c(-4.3,2.5)))
lapply(top10brands_headphone$brand, function(x) topicBoxplot(merged_topic_headphone, "Headphones", x, c(-4.3,2.5)))
# CREATE BOXPLOT FOR TOPIC-SENTIMENT
topicBoxplot <- function(input, category, brandSelect, ylim){
input$mainTopic <- as.factor(input$mainTopic)
if(brandSelect != "") {
input <- input %>%
filter(brand == brandSelect)
}
ggplot(input) +
aes(x=mainTopic, y=scoreNN) +
geom_boxplot() +
ggtitle(paste("Topic-oriented Sentiment-Score for", brandSelect, sep = " ")) +
ylim(ylim)
}
lapply(top10brands_headphone$brand, function(brandSelect) topicBoxplot(merged_topic_headphone, "Headphones", brandSelect, c(-4.3,2.5)))
lapply(top10brands_cellphone$brand, function(brandSelect) topicBoxplot(merged_topic_cellphone, "Cellphone", brandSelect, c(-4.3,2.5)))
View(merged_topic_headphone)
View(merged_topic_toaster)
# MEAN-SCORE FOR EACH TOPIC
meanScoreTopic <- function(input, brandSelect){
if(brandSelect != "") {
input <- input %>%
filter(brand == brandSelect)
}
input %>%
group_by(mainTopic) %>%
summarise(AvgScore=mean(scoreNN))
}
# Apply meanScoreTopic-function
meanScoreTopic(merged_topic_headphone)
# Apply meanScoreTopic-function
meanScoreTopic(merged_topic_headphone, "")
# Apply meanScoreTopic-function
meanScoreTopic(merged_topic_headphone, "beats")
# Apply meanScoreTopic-function
meanScoreTopic(merged_topic_headphone, "sennheiser")
# Apply meanScoreTopic-function
meanScoreTopic(merged_topic_headphone, "beats")
# Apply meanScoreTopic-function
meanScoreTopic(merged_topic_headphone, "bose")
# Apply meanScoreTopic-function
lapply(top10brands_headphone, function(brandSelect) meanScoreTopic(merged_topic_headphone, brandSelect))
# Apply meanScoreTopic-function
lapply(top10brands_headphone$brand, function(brandSelect) meanScoreTopic(merged_topic_headphone, brandSelect))
# Apply meanScoreTopic-function
sapply(top10brands_headphone$brand, function(brandSelect) meanScoreTopic(merged_topic_headphone, brandSelect))
# Apply meanScoreTopic-function
topicScoreHeadphone <- sapply(top10brands_headphone$brand, function(brandSelect) meanScoreTopic(merged_topic_headphone, brandSelect))
View(topicScoreHeadphone)
# Apply meanScoreTopic-function
topicScoreHeadphone <- mapply(top10brands_headphone$brand, function(brandSelect) meanScoreTopic(merged_topic_headphone, brandSelect))
# Apply meanScoreTopic-function
topicScoreHeadphone <- apply(top10brands_headphone$brand, function(brandSelect) meanScoreTopic(merged_topic_headphone, brandSelect))
# Apply meanScoreTopic-function
topicScoreHeadphone <- lapply(top10brands_headphone$brand, function(brandSelect) meanScoreTopic(merged_topic_headphone, brandSelect))
topicScoreHeadphone
# Apply meanScoreTopic-function
topicScoreHeadphone <- sapply(top10brands_headphone$brand, function(brandSelect) meanScoreTopic(merged_topic_headphone, brandSelect))
topicScoreHeadphone
# Apply meanScoreTopic-function
topicScoreHeadphone <- unlist(sapply(top10brands_headphone$brand, function(brandSelect) meanScoreTopic(merged_topic_headphone, brandSelect)))
# Apply meanScoreTopic-function
topicScoreHeadphone <- unlist(sapply(top10brands_headphone$brand, function(brandSelect) meanScoreTopic(merged_topic_headphone, brandSelect)))
# Apply meanScoreTopic-function
topicScoreHeadphone <- sapply(top10brands_headphone$brand, function(brandSelect) meanScoreTopic(merged_topic_headphone, brandSelect))
View(topicScoreHeadphone)
# Apply meanScoreTopic-function
topicScoreHeadphone <- lapply(top10brands_headphone$brand, function(brandSelect) meanScoreTopic(merged_topic_headphone, brandSelect))
topicScoreHeadphone
# Apply meanScoreTopic-function
topicScoreCellphone <- lapply(top10brands_cellphone$brand, function(brandSelect) meanScoreTopic(merged_topic_cellphone, brandSelect))
topicScoreCellphone
# Apply meanScoreTopic-function
meanScoreTopic(merged_topic_headphone)
# Apply meanScoreTopic-function
meanScoreTopic(merged_topic_headphone, "")
meanScoreTopic(merged_topic_cellphone, "")
topicBoxplot(merged_topic_cellphone, "Cellphones", "", c(-4.3,2.5))
topicBoxplot(merged_topic_toaster, "Toasters", "", c(-4.3,2.5))
topicBoxplot(merged_topic_toaster, "Toasters", "", c(-5,5))
topicBoxplot(merged_topic_toaster, "Toasters", "", c(-5,3))
topicBoxplot(merged_topic_toaster, "Toasters", "", c(-4.1,3))
topicBoxplot(merged_topic_coffee, "Coffee", "", c(-4.1,3))
topicBoxplot(merged_topic_coffee, "Coffee", "", c(-5,3))
topicBoxplot(merged_topic_coffee, "Coffee", "", c(-4.3,2.7))
topicBoxplot(merged_topic_coffee, "Coffee", "", c(-4.3,2.8))
topicBoxplot(merged_topic_coffee, "Coffee", "", c(-4.4,2.5))
topicBoxplot(merged_topic_coffee, "Coffee", "", c(-4.6,2.5))
topicBoxplot(merged_topic_coffee, "Coffee", "", c(-4.6,2.7))
topicBoxplot(merged_topic_coffee, "Coffee", "", c(-4.4,2.7))
topicBoxplot(merged_topic_coffee, "Coffee", "", c(-4.3,2.7))
topicBoxplot(merged_topic_coffee, "Coffee", "", c(-4.4
,2.7))
# CREATE BOXPLOT FOR TOPIC-SENTIMENT
topicBoxplot <- function(input, category, brandSelect, ylim){
input$mainTopic <- as.factor(input$mainTopic)
if(brandSelect != "") {
input <- input %>%
filter(brand == brandSelect)
category <- paste(category, "(Brand ", brandSelect, ")", sep = "")
}
ggplot(input) +
aes(x=mainTopic, y=scoreNN) +
geom_boxplot() +
ggtitle(paste("Topic-oriented Sentiment-Scores for", category, sep = " ")) +
ylim(ylim)
}
# Apply topicBoxplot-function
topicBoxplot(merged_topic_cellphone, "Cellphones", "", c(-4.3,2.5))
lapply(top10brands_cellphone$brand, function(brandSelect) topicBoxplot(merged_topic_cellphone, "Cellphone", brandSelect, c(-4.3,2.5)))
# CREATE BOXPLOT FOR TOPIC-SENTIMENT
topicBoxplot <- function(input, category, brandSelect, ylim){
input$mainTopic <- as.factor(input$mainTopic)
if(brandSelect != "") {
input <- input %>%
filter(brand == brandSelect)
category <- paste(category, " (Brand ", brandSelect, ")", sep = "")
}
ggplot(input) +
aes(x=mainTopic, y=scoreNN) +
geom_boxplot() +
ggtitle(paste("Topic-oriented Sentiment-Scores for", category, sep = " ")) +
ylim(ylim)
}
lapply(top10brands_cellphone$brand, function(brandSelect) topicBoxplot(merged_topic_cellphone, "Cellphone", brandSelect, c(-4.3,2.5)))
# CREATE BOXPLOT FOR TOPIC-SENTIMENT
topicBoxplot <- function(input, category, brandSelect, ylim){
input$mainTopic <- as.factor(input$mainTopic)
if(brandSelect != "") {
input <- input %>%
filter(brand == brandSelect)
category <- paste(category, ' (Brand \"', brandSelect, '\")', sep = "")
}
ggplot(input) +
aes(x=mainTopic, y=scoreNN) +
geom_boxplot() +
ggtitle(paste("Topic-oriented Sentiment-Scores for", category, sep = " ")) +
ylim(ylim)
}
lapply(top10brands_cellphone$brand, function(brandSelect) topicBoxplot(merged_topic_cellphone, "Cellphone", brandSelect, c(-4.3,2.5)))
topicBoxplot(merged_topic_toaster, "Toasters", "", c(-4.1,3))
lapply(top10brands_toaster$brand, function(brandSelect) topicBoxplot(merged_topic_toaster, "Toaster", brandSelect, c(-4.1,3)))
merged_topic_toaster
names(merged_topic_toaster) <- c("asin", "overall", "reviewTime", "reviewerID", "review", "title", "price", "brand", "scoreNN", "scoreLX", "words", "mainTopic", "Topic1", "Topic2", "Topic3", "Topic4", "Topic5")
merged_topic_toaster
merged_topic_toaster
View(merged_topic_toaster)
names(merged_topic_toaster) <- c("asin", "overall", "reviewTime", "reviewerID", "review", "title", "price", "brand", "scoreNN", "scoreLX", "words", "document", "category", "mainTopic", "Topic1", "Topic2", "Topic3", "Topic4", "Topic5")
View(merged_topic_toaster)
lapply(top10brands_toaster$brand, function(brandSelect) topicBoxplot(merged_topic_toaster, "Toaster", brandSelect, c(-4.1,3)))
meanScoreTopic(merged_topic_toaster, "")
meanScoreTopic(merged_topic_coffee, "")
merged_topic_cellphone
merged_topic_headphone
merged_topic_toaster
merged_topic_coffee
names(merged_topic_coffee) <- c("asin", "overall", "reviewTime", "reviewerID", "review", "title", "price", "brand", "scoreNN", "scoreLX", "words", "document", "category", "mainTopic", "Topic1", "Topic2", "Topic3", "Topic4", "Topic5")
# Topic-Assigment
saveData(merged_topic_cellphone, "mergedTopicCellphone")
saveData(merged_topic_toaster, "mergedTopicToaster")
saveData(merged_topic_coffee, "mergedTopicCoffee")
rm(list=ls())
prep_cellphone_brand <- as_tibble(fread("output/prep_cellphone_brand-filtered.csv"))
prep_toaster_brand  <- as_tibble(fread("output/prep_toaster_brand-filtered.csv"))
prep_coffee_brand <- as_tibble(fread("output/prep_coffee_brand-filtered.csv"))
library(text2vec)
library(xgboost)
library(pdp)
library(dplyr)
library(tidytext)
library(tidyverse)
library(Ckmeans.1d.dp)
# SET SEED
# For reproducible sampling
set.seed(101)
# TAKE DATA SAMPLE ABOUT 30%
sampleData <- function(input){
sample <- sample.int(n = nrow(input), size = floor(.3*nrow(input)), replace = F)
return(sample)
}
sampleCellphone <- sampleData(prep_cellphone_brand)
sampleCoffee <- sampleData(prep_coffee_brand)
sampleToaster <- sampleData(prep_toaster_brand)
# PULL SAMPLE OF DATASET
mediateCellphone <- as.tibble(prep_cellphone_brand[sampleCellphone, ])
mediateCoffee <- as.tibble(prep_coffee_brand[sampleCoffee, ])
mediateToaster <- as.tibble(prep_toaster_brand[sampleToaster, ])
prep_cellphone_brand <- as_tibble(fread("output/prep_cellphone_brand.csv"))
prep_toaster_brand  <- as_tibble(fread("output/prep_toaster_brand.csv"))
prep_coffee_brand <- as_tibble(fread("output/prep_coffee_brand.csv"))
# SET SEED
# For reproducible sampling
set.seed(101)
# Apply sampleData-function
sampleCellphone <- sampleData(prep_cellphone_brand)
sampleCoffee <- sampleData(prep_coffee_brand)
sampleToaster <- sampleData(prep_toaster_brand)
# PULL SAMPLE OF DATASET
mediateCellphone <- as.tibble(prep_cellphone_brand[sampleCellphone, ])
mediateCoffee <- as.tibble(prep_coffee_brand[sampleCoffee, ])
mediateToaster <- as.tibble(prep_toaster_brand[sampleToaster, ])
# MEDIATE DATA
removeXGsw <- function(input){
input %>%
unnest_tokens(word, review) %>% # unnest the reviews to single words
# anti_join(stopword_list, by = c("word" = "value")) %>% # anti-join to predefined stopword list
anti_join(stop_words) %>% # anti-join to predefined stopword list
nest(word) %>% # nest the words again to list items
mutate(review = map(data, unlist), # create review column and glue the terms together again
review = map_chr(review, paste, collapse = " ")) # separate by a blank
}
# Apply removeXGsw-function
mediateCellphone <- removeXGsw(mediateCellphone)
mediateCoffee <- removeXGsw(mediateCoffee)
mediateToaster <- removeXGsw(mediateToaster)
# TAKE DATA SAMPLE ABOUT 30%
sampleData <- function(input, x){ # x for amount of data
sample <- sample.int(n = nrow(input), size = floor(x*nrow(input)), replace = F)
return(sample)
}
sampleToaster <- sampleData(prep_toaster_brand, .5)
mediateToaster <- as.tibble(prep_toaster_brand[sampleToaster, ])
mediateToaster <- removeXGsw(mediateToaster)
trainToaster <- mediateToaster[1:50000,] # training-data
# CREATE TRAIN DATA
trainCellphone <- mediateCellphone[1:12000,] # training-data
trainToaster <- mediateToaster[1:6000,] # training-data
trainCoffee <- mediateCoffee[1:18000,] # training-data
# CREATE TEST DATA
testCellphone <- mediateCellphone[12001:16198,] # test-data
testToaster <- mediateToaster[6001:8008,] # test-data
testCoffee <- mediateCoffee[19001:25067,] # test-data
# CREATE THIRD DATA CHUNK
verifyCellphone <- prep_cellphone_brand[10000:14000,]
verifyToaster <- prep_toaster_brand[3000:4000,]
verifyCoffee <- prep_coffee_brand[12500:17500,]
# CREATE VOCABULARY
# Tokenize the movie reviews and create a vocabulary of tokens including document counts
# Mediate Data as input
createVoc <- function(input){
vocab <- create_vocabulary(itoken(input$review,
tokenizer = word_tokenizer))
return(vocab)
}
# Apply createVoc-function
vocabCellphone <- createVoc(mediateCellphone)
vocabToaster <- createVoc(mediateToaster)
vocabCoffee <- createVoc(mediateCoffee)
# BUILD DTM
# Build a document-term matrix using the tokenized review text. This returns a dgCMatrix object
createDTM <- function(input, vocab){
dtm <- create_dtm(itoken(input$review, tokenizer = word_tokenizer), vocab_vectorizer(vocab))
return(dtm)
}
# Apply createDTM-function
# Train
dtm_trainCellphone <- createDTM(trainCellphone, vocabCellphone)
dtm_trainCoffee <- createDTM(trainCoffee, vocabCoffee)
dtm_trainToaster <- createDTM(trainToaster, vocabToaster)
# Test
dtm_testCellphone <- createDTM(testCellphone, vocabCellphone)
dtm_testToaster <- createDTM(testToaster, vocabToaster)
dtm_testCoffee <- createDTM(testCoffee, vocabCoffee)
# Verify
dtm_verifyCellphone <- createDTM(verifyCellphone, vocabCellphone)
dtm_verifyToaster <- createDTM(verifyToaster, vocabToaster)
dtm_verifyCoffee <- createDTM(verifyCoffee, vocabCoffee)
trainScoreCellphone <- trainCellphone$scoreNN
testScoreCellphone <- testCellphone$scoreNN
trainScoreCoffee <- trainCoffee$scoreNN
testScoreCoffee <- testCoffee$scoreNN
trainScoreToaster <- trainToaster$scoreNN
testScoreToaster <- testToaster$scoreNN
# CREATE XGB-MATRIX
# Turn the DTM into an XGB matrix using the sentiment scores that are to be learned
xgbMTrainCellphone <- xgb.DMatrix(dtm_trainCellphone, label = trainScoreCellphone)
xgbMTestCellphone <- xgb.DMatrix(dtm_testCellphone, label = testScoreCellphone)
xgbMTrainCoffee <- xgb.DMatrix(dtm_trainCoffee, label = trainScoreCoffee)
xgbMTestCoffee <- xgb.DMatrix(dtm_testCoffee, label = testScoreCoffee)
xgbMTrainToaster <- xgb.DMatrix(dtm_trainToaster, label = trainScoreToaster)
xgbMTestToaster <- xgb.DMatrix(dtm_testToaster, label = testScoreToaster)
# CREATE WATCHLIST FOR PERFORMANCE MONITORING
watchlistCellphone <- list(validation = xgbMTestCellphone, train=xgbMTrainCellphone)
watchlistCoffee <- list(validation = xgbMTestCoffee, train=xgbMTrainCoffee)
watchlistToaster <- list(validation = xgbMTestToaster, train=xgbMTrainToaster)
# Build XGBOOST Model
xgb_params = list(
objective = "reg:linear", # linear regression as a continuous variable has to be predicted
eta = 0.01,
max.depth = 1000)
# Train the model
trainXGB <- function(train_matrix, xgb_params, watchlist){
#xgb_fit <- xgboost(params = xgb_params, data = train_matrix, nrounds = 10000, early_stopping_rounds = 20, maximize = FALSE) # without verify process
xgb_fit <- xgb.train(params = xgb_params, data = train_matrix, nrounds = 10000, watchlist = watchlist, early_stopping_rounds = 20, maximize = FALSE) # with verify process
return(xgb_fit)
}
# SAVE XGBOOST
saveXG <- function(input, filename){
xgb.save(input, paste("output/", filename, sep=""))
}
