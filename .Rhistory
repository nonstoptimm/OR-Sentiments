# Headphone
calcMeanScoreBrand(prep_headphone_brand, "akg")
# Headphone
calcMeanScoreBrand(prep_headphone_brand, "sony")
dtm_headphone_brand  <- prep_headphone_brand
tokenized_headphone <- tokenizeReview(prep_headphone_brand)
tokenized_headphone <- removeStopwords(tokenized_headphone)
# Apply to tokenized dataset
countWordsHeadphone <- countWords(tokenized_headphone)
countWordsHeadphone
wf_headphone <- countWordsUnw(tokenized_headphone, c("headphone"))
wf_headphone_brand <- countWordsBrand(tokenized_toaster, c("headphone", "buy"))
wf_headphone_category <- countWordsCategory(tokenized_headphone, c("headphone", "buy"))
wf_headphone_category
wf_headphone_brand
wf_headphone_brand <- countWordsBrand(tokenized_headphone, c("headphone", "buy"))
wf_headphone_category
tf_idf_general(countWordsHeadphone)
getSentiment(tokenized_headphone, "bing")
getSentiment(tokenized_cellphone, "bing")
getSentiment(tokenized_headphone, "bing")
getSentiment(tokenized_headphone, "nrc")
plotHistogram(prep_headphone_brand, "Headphone Reviews")
tokenized_headphone_bigram <- tokenizeBigram(prep_headphone_brand)
countBigram(tokenized_headphone_bigram)
tokenized_headphone_bigram <- separateBigrams(tokenized_headphone_bigram)
tokenized_headphone_bigram_filtered <- filterBigrams(tokenized_headphone_bigram)
tokenized_headphone_bigram_united <- uniteBigrams(tokenized_headphone_bigram_filtered)
countBigramHeadphone <- CountBigram(tokenized_headphone_bigram_united)
countBigramHeadphone <- countBigram(tokenized_headphone_bigram_united)
countBigramHeadphone
filterBigramNotHeadphone <- filterBigramNot(tokenized_headphone_bigram)
filterBigramNotHeadphone
tokenized_bigram_counts_headphone <- tokenized_bigram_counts(prep_headphone_brand, "")
tokenized_bigram_counts_headphone
rm(tokenized_bigram_counts_headphone)
# Apply it to the datasets
plotNotWords(tokenized_bigram_counts(prep_headphone_brand, ""), "Headphones")
# Apply it to the datasets
plotNotWords(tokenized_bigram_counts(prep_headphone_brand, "beats"), "Headphones")
# fwrite(calcMeanScore(merged_topic_coffee), "output/mean_coffee.csv")
# Headphone
calcMeanScore(prep_headphone_brand)
#fwrite(calcVarScore(prep_coffee_brand), "output/var_coffee.csv")
# Headphone
calcVarScore(prep_headphone_brand)
# Headphone
calcSdScore(prep_headphone_brand)
#fwrite(corrCoeff(prep_coffee_brand), "output/cor_coffee.csv")
# Headphone
corrCoeff(prep_headphone_brand)
names(dtm_samsung)
names(dtm_cellphone_brand)
# Headphone
calcMeanScoreBrand(prep_headphone_brand, "beats")
#fwrite(calcVarScoreBrand(prep_coffee_brand, ""), "output/var_coffee.csv")
# Headphone
calcVarScoreBrand(prep_headphone_brand, "beats")
#fwrite(calcVarScoreBrand(prep_coffee_brand, ""), "output/var_coffee.csv")
# Headphone
calcVarScoreBrand(prep_headphone_brand, "sennheiser")
# Toaster
# calcSdScoreBrand(prep_toaster_brand, "")
# Coffee
# calcSdScoreBrand(prep_coffee_brand, "")
# Headphone
calcSdScoreBrand(prep_headphone_brand, "beats")
# Toaster
# calcSdScoreBrand(prep_toaster_brand, "")
# Coffee
# calcSdScoreBrand(prep_coffee_brand, "")
# Headphone
calcSdScoreBrand(prep_headphone_brand, "sennheiser")
# Headphone
calcMeanScoreBrand(prep_headphone_brand, "beats")
# Headphone
calcMeanScoreBrand(prep_headphone_brand, "sennheiser")
#fwrite(calcVarScoreBrand(prep_cellphone_brand, "apple"), "output/var_cellphone_apple.csv")
calcVarScoreBrand(merged_topic_samsung, "ocean cross")
#fwrite(calcVarScoreBrand(prep_cellphone_brand, "apple"), "output/var_cellphone_apple.csv")
calcVarScoreBrand(dtm_cellphone_brand, "ocean cross")
# Calculate Standard Deviation for Sentiment Scores
# Cellphone
calcSdScoreBrand(dtm_cellphone_brand, "ocean cross")
plot(dtm_headphone_brand$overall, dtm_headphone_brand$scoreNN)
dtm_headphone_brand %>% filter(scoreNN > 4)
dtm_headphone_brand %>% filter(scoreNN > 3.9)
dtm_headphone_brand %>% filter(scoreNN < -2)
dtm_headphone_brand %>% filter(overall == 5 & scoreNN < -2)
# Calculate Variance Deviation for Sentiment Scores
# Cellphones
calcVarScore(merged_topic_cellphone)
?knn
library("knn")
?read.txt
?read_file
read.table("inputd-data/wineequality.txt", stringsAsFactors = TRUE)
winequality <- read.table("inputd-data/winequality.txt", stringsAsFactors = TRUE)
winequality <- read.table("input-data/winequality.txt", stringsAsFactors = TRUE)
View(winequality)
glimpse(winequality)
validation <- read.table("input-data/validation.txt", stringsAsFactors = TRUE)
glimpse(validation)
winequality <- read.table("input-data/winequality.txt", stringsAsFactors = FALSE)
validation <- read.table("input-data/validation.txt", stringsAsFactors = FALSE)
winequality <- read.table("input-data/winequality.txt", stringsAsFactors = FALSE)
glimpse(validation)
winequality <- read.table("input-data/winequality.txt", stringsAsFactors = FALSE)
winequality$V12 <- as.factor(winequality$V12)
glimpse(validation)
glimpse(winequality)
round(prop.table(table(winequality$V12)) * 100, digits = 1)
return ((x - min(x)) / (max(x) - min(x))) }
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x))) }
prc_n <- as.data.frame(lapply(winequality[1:11], normalize))
prc_n
rm(prc_n)
winequality_n <- as.data.frame(lapply(winequality[1:11], normalize))
validation$V12 <- as.factor(validation$V12)
validation_n <- as.data.frame(lapply(validation[1:11], normalize))
install.package("class")
install.packages("class")
library(class)
prc_test_pred <- knn(train = winequality_n, test = validation_n,cl = winequality[,1], k=10)
prc_test_pred
library(gmodels)
install.packages("gmodels")
sq(1600)
root(1600)
prc_test_pred <- knn(train = winequality_n, test = validation_n,cl = winequality[,1], k=40)
prc_test_pred
?knn
prc_test_pred <- knn(train = winequality_n, test = validation_n,cl = winequality[,11], k=40)
prc_test_pred
prc_test_pred <- knn(train = winequality_n, test = validation_n,cl = winequality_n[,11], k=40)
prc_test_pred
library(gmodels)
CrossTable(x = validation_n[,11], y = prc_test_pred, prop.chisq = FALSE)
result_predict <- CrossTable(x = validation_n[,11], y = prc_test_pred, prop.chisq = FALSE)
result_predict
prc_test_pred <- knn(train = winequality_n, test = validation_n,cl = winequality[,12], k=40)
prc_test_pred
CrossTable(x = validation[,12], y = prc_test_pred, prop.chisq = FALSE)
prc_test_pred <- knn(train = winequality_n, test = validation_n,cl = winequality[,12], k=10)
CrossTable(x = validation[,12], y = prc_test_pred, prop.chisq = FALSE)
prc_test_pred <- knn(train = winequality_n, test = validation_n,cl = winequality[,12], k=40)
CrossTable(x = validation[,12], y = prc_test_pred, prop.chisq = FALSE)
prc_test_pred <- knn(train = winequality_n, test = validation_n,cl = winequality[,12], k=40)
CrossTable(x = validation[,12], y = prc_test_pred, prop.chisq = FALSE)
prc_test_pred <- knn(train = winequality_n, test = validation_n,cl = winequality[,12], k=30)
CrossTable(x = validation[,12], y = prc_test_pred, prop.chisq = FALSE)
prc_test_pred <- knn(train = winequality_n, test = validation_n,cl = winequality[,12], k=1)
CrossTable(x = validation[,12], y = prc_test_pred, prop.chisq = FALSE)
prc_test_pred <- knn(train = winequality_n, test = validation_n,cl = winequality[,12], k=50)
CrossTable(x = validation[,12], y = prc_test_pred, prop.chisq = FALSE)
prc_test_pred <- knn(train = winequality_n, test = validation_n,cl = winequality[,12], k=60)
CrossTable(x = validation[,12], y = prc_test_pred, prop.chisq = FALSE)
seeds <- read.table("input-data/seeds.txt", stringsAsFactors = FALSE)
head(seeds)
names(seeds) <- c("area", "perimeter", "compactness", "lengthOfKernel", "widthOfKernel", "asymmetryCoefficient", "lengthOfKernelGroove")
head(seeds)
head(seeds
)
seeds_pca <- princomp(seeds, cor = TRUE, score = TRUE)
summary(seeds_pca)
plot(seeds_pca)
biplot(seeds_pca)
attributes(seeds_pca)
seeds_pca
library(stats)
seeds_pca <- princomp(seeds, cor = TRUE)
biplot(seeds_pca)
attributes(seeds_pca)
seeds_pca
summary(seeds_pca)
View(seeds)
is.na(seeds)
summary(is.na(seeds))
is.na(seeds)
seeds_pca
seeds_pca$scores
biplot(seeds_pca)
seeds_mds <- cmdscale(seeds, eig = TRUE, k = 2)
seeds
seeds_mds <- cmdscale(seeds, eig = TRUE, k = 2)
names(seeds)
dist(seeds)
seeds_mds <- cmdscale(dist(seeds), eig = TRUE, k = 2)
biplot(seeds_mds)
seeds_mds
seeds_mds$points[,1]
plot(seeds_mds$points[,1], seeds_mds$points[,2], pch = 19, xlim = range(x) + c(0, 600))
seeds_mds$points[,2]
plot(x = seeds_mds$points[,1], y = seeds_mds$points[,2], pch = 19, xlim = range(x) + c(0, 600))
x = seeds_mds$points[,1]
y = seeds_mds$points[,2]
plot(x, y, pch = 19, xlim = range(x) + c(0, 600))
plot(x, y, pch = 19)
plot(x, y, pch = 19,type="n")
plot(x, y, type="n")
plot(x, y)
text(x, y, labels = row.names(seeds), cex=.7)
winequality <- read.table("input-data/winequality.txt", stringsAsFactors = TRUE)
glimpse(winequality)
biplot(seeds_mds)
biplot(seeds_pca)
CrossTable(x = validation[,12], y = prc_test_pred, prop.chisq = FALSE)
prc_test_pred <- knn(train = winequality_n, test = validation_n,cl = winequality[,12], k=40)
CrossTable(x = validation[,12], y = prc_test_pred, prop.chisq = FALSE)
prc_test_pred <- knn(train = winequality_n, test = validation_n,cl = winequality[,12], k=10)
CrossTable(x = validation[,12], y = prc_test_pred, prop.chisq = FALSE)
prc_test_pred <- knn(train = winequality_n, test = validation_n,cl = winequality[,12], k=1)
CrossTable(x = validation[,12], y = prc_test_pred, prop.chisq = FALSE)
prc_test_pred <- knn(train = winequality_n, test = validation_n,cl = winequality[,12], k=4)
CrossTable(x = validation[,12], y = prc_test_pred, prop.chisq = FALSE)
dtm_headphone_brand %>% filter(scoreNN > 4)
dtm_headphone_brand %>% filter(scoreNN > 4 & overall == 1)
dtm_headphone_brand %>% filter(scoreNN > 3.8 & overall == 1)
dtm_headphone_brand %>% filter(scoreNN > 3.85& overall == 1)
dtm_headphone_brand %>% filter(scoreNN > 3.5 & overall == 1)
dtm_headphone_brand %>% filter(scoreNN > 3 & overall == 1)
dtm_headphone_brand %>% filter(scoreNN > 2 & overall == 1)
dtm_headphone_brand %>% filter(scoreNN > 1 & overall == 1)
plot(dtm_headphone_brand$overall, dtm_headphone_brand$scoreNN)
dtm_cellphone_brand %>% filter(scoreNN > 2 & overall == 1)
dtm_cellphone_brand %>% filter(scoreNN > 1 & overall == 1)
dtm_cellphone_brand %>% filter(scoreNN > 1 & overall == 1) %>% select(review)
plot(dtm_cellphone_brand$overall, dtm_cellphone_brand$scoreNN)
dtm_cellphone_brand %>% filter(scoreNN > 0.8 & overall == 1) %>% select(review)
dtm_cellphone_brand %>% filter(scoreNN > 0.8 & overall = 1) %>% select(review)
dtm_cellphone_brand %>% filter(scoreNN > 0.8 & overall == 1) %>% select(review)
dtm_cellphone_brand %>% filter(scoreNN > 0 & overall == 1) %>% select(review)
dtm_cellphone_brand %>% filter(scoreNN > 0.8 & overall == 1) %>% select(review, document)
dtm_cellphone_brand %>% filter(scoreNN > 0 & overall == 1) %>% select(review)
dtm_cellphone_brand %>% filter(scoreNN > 0 & overall == 1) %>% select(review, document)
dtm_cellphone_brand %>% filter(scoreNN > 0 & overall == 1) %>% select(review)
dtm_cellphone_brand %>% filter(scoreNN > 0 & overall == 1) %>% select(review)
dtm_cellphone_brand %>% filter(scoreNN > 0 & overall == 1) %>% select(review, document)
prep_headphone_brand %>% filter(asin == "B00F3J4B5S" & reviewerID == "AZG324CQ94D1M")
head(prep_headphone_brand)
prep_cellphone_brand %>% filter(asin == "B00F3J4B5S" & reviewerID == "AZG324CQ94D1M")
prep_headphone_brand %>% filter(brand == "beats") %>% summarise(cor = cor(overall, scoreNN))
prep_headphone_brand %>% filter(brand == "sennheiser") %>% summarise(cor = cor(overall, scoreNN))
normalized_score <- normalize(prep_headphone_brand$scoreNN)
head(normalized_score)
normalized_star <- normalize(prep_headphone_brand$overall)
cor(normalized_star, normalized_score)
rm(normalized_star)
rm(normalized_score)
normalized_star <- normalize(prep_headphone_brand$overall)
normalized_score <- normalize(prep_headphone_brand$scoreNN)
plot(normalized_score, normalized_star)
plot(normalized_score, normalized_star)
plot(normalized_star, normalized_score)
abline(lm(normalized_star~normalized_score), col="red") #
regression line (y ~x)
regression line (y ~ x)
regressionline (y ~ x)
lines(loewss(normalized_score, normalized_star), col = "blue")
lines(lowess(normalized_score, normalized_star), col = "blue")
shapiro.test(normalized_star)
shapiro.test(normalized_star[sample(10,100)],)
shapiro.test(normalized_star[sample(10,100),])
shapiro.test(normalized_star[sample(5000),])
shapiro.test(normalized_star[sample(5000,210372),])
shapiro.test(sample(normalized_score, 5000, replace = FALSE))
shapiro.test(sample(normalized_star, 5000, replace = FALSE))
t.test(sample(normalized_star, 5000, replace = FALSE))
t.test(sample(normalized_star, 5000, replace = FALSE))
t.test(sample(normalized_star, 200, replace = FALSE))
t.test(sample(normalized_star, 20, replace = FALSE))
t.test(sample(normalized_star, ^0, replace = FALSE))
t.test(sample(normalized_star, 10, replace = FALSE))
t.test(sample(normalized_star, 5, replace = FALSE))
t.test(sample(normalized_star, 8, replace = FALSE))
t.test(sample(normalized_star, 20, replace = FALSE))
biplot(seeds_pca)
biplot(seeds_pca, scale=0, cex=.7)
biplot(seeds_pca)
pca.out <- seeds_pca
pca.out$rotation <- -pca.out$rotation
pca.out$x <- -pca.out$x
biplot(pca.out,scale=0, cex=.7)
seeds_pca$rotation
prcomp(seeds,center = TRUE,scale. = TRUE)
seeds_pca <- prcomp(seeds,center = TRUE,scale. = TRUE)
names(seeds_pca)
pca.out <- seeds_pca
pca.out$rotation <- -pca.out$rotation
pca.out$x <- -pca.out$x
biplot(pca.out,scale=0, cex=.7)
biplot(pca.out,scale=0, cex=.7)
biplot(pca.out,scale=0)
seeds_pca <- prcomp(seeds,center = TRUE)
biplot(seeds_pca,scale=0)
biplot(pca.out,scale=0, cex=.7)
seeds_pca <- prcomp(seeds,center = TRUE,scale. = TRUE)
biplot(seeds_pca,scale=0, cex=.7)
seeds_pca <- prcomp(seeds,center = TRUE)
names(seeds)
names(seeds_pca)
View(countWordsToaster)
View(countBigramHeadphone)
View(filterBigramNotHeadphone)
rm(pca.out)
View(result_predict)
rm(seeds)
View(dtm_samsung_wordCounts)
View(filterBigramNotCellphone)
View(filterBigramNotHeadphone)
View(scoreToasterAFINN)
View(scoreCellphoneAFINN)
View(sentimentReviewCellphone)
View(sentimentReviewToaster)
scoreHeadphoneAFINN <- sentimentScoreAFINN(wf_headphone_brand)
library(dplyr)
scoreHeadphoneAFINN <- sentimentScoreAFINN(wf_headphone_brand)
library(tidyr)
scoreHeadphoneAFINN <- sentimentScoreAFINN(wf_headphone_brand)
library(tidytext)
head(prep_headphone_brand$review)
prep_headphone_brand %>% filter(brand == "beats") %>% select(review)
prep_headphone_brand %>% filter(brand == "beats") %>% select(title)
prep_headphone_brand %>% filter(brand == "beats" title == "*Solo*") %>% select(title)
prep_headphone_brand %>% filter(brand == "beats" title == *Solo*) %>% select(title)
prep_headphone_brand %>% filter(brand == "beats") %>% select(title)
prep_headphone_brand %>% group_by(title) %>% filter(n()==12)
prep_headphone_brand %>% filter(n()==12)
prep_headphone_brand %>% filter(brand == "beats") %>% top_n(20)
prep_headphone_brand %>% filter(brand == "beats") %>% select(title) %>% distinct()
prep_headphone_brand %>% filter(title == "Beats Studio Over-Ear Headphones (Black)") %>% select(review)
str(dtm_cellphone)
names(dtm_cellphone)
head(dtm_cellphone_apple)
names(dtm_headphone_brand)
head(dtm_headphone_byReview)
head(dtm_cellphone_byReview)
head(dtm_cellphone_wordCounts)
head(dtm_cellphone)
str(dtm_cellphone)
dtmCreatorNN <- function(input) {
input %>%
cast_dtm(document, scoreNN, word, n)
}
dtm_cellphoneNN <- dtmCreatorNN(dtm_cellphone_wordCounts)
library(xgboost)
install.packages("xgboost")
library(xgboost)
tf_idf_category(wf_cellphone)
tf_idf_category <- function(input) {
input %>%
bind_tf_idf(word, asin, n) %>%
filter(n >= 20) %>%
arrange(desc(tf_idf))
}
tf_idf_category(wf_cellphone)
names(wf_cellphone)
countWordsCoffee
wf_cellphone_brand
wf_cellphone_category
tf_idf_general(countWordsHeadphone)
names(wf_cellphone_brand)
tf_idf_brand(wf_cellphone_brand)
tf_idf_brand <- function(input) {
input %>%
bind_tf_idf(word, brand, n) %>%
filter(n >= 20 & !brand == word) %>%
arrange(desc(tf_idf))
}
tf_idf_brand(wf_cellphone_brand)
tf_idf_brand <- function(input) {
input %>%
bind_tf_idf(word, brand, n) %>%
filter(n >= 20 & !brand == word & brand == "beats") %>%
arrange(desc(tf_idf))
}
tf_idf_brand(wf_headphone_brand)
names(wf_cellphone)
tf_idf_brand <- function(input, brands) {
input %>%
bind_tf_idf(word, brand, n) %>%
filter(n >= 20 & !brand == word & brand %in% brands) %>%
arrange(desc(tf_idf))
}
tf_idf_brand(wf_headphone_brand, c("beats", "sennheiser", "panasonic", "sony"))
tf_idf_brands <- tf_idf_brand(wf_headphone_brand, c("beats", "sennheiser", "panasonic", "sony"))
View(tf_idf_brands)
names(prep_headphone_brand)
nasa_desc <- prep_headphone_brand %>%
select(-description) %>%
unnest_tokens(word, review) %>%
anti_join(stop_words)
library(data.table)
prep_input <- as.data.table(prep_headphone_brand)
nasa_desc <- prep_input %>%
select(-description) %>%
unnest_tokens(word, review) %>%
anti_join(stop_words)
plotHistogram(prep_headphone_brand, "Headphone Reviews")
countBigram(tokenized_headphone_bigram)
?fwrite
fwrite(LDA_reviews_apple, file = "LDA_reviews_apple.csv")
View(LDA_reviews_apple)
saveRDS(LDA_reviews_apple, "LDA_apple.rds")
topic2 <- readRDS("LDA_apple.rds")
saveLDA <- function(input, filename) {
saveRDS(input, paste(filename, "rds", sep="."))
}
saveLDA(LDA_reviews_apple, "kiki")
saveLDA <- function(input, filename) {
saveRDS(input, paste("output/", filename, "rds", sep="."))
}
saveLDA(LDA_reviews_apple, "LDA_reviews_apple")
# TOPIC MODELS
saveLDA <- function(input, filename) {
saveRDS(input, paste("output/", filename, ".rds", sep=""))
}
# Apply saveLDA Function
saveLDA(LDA_reviews_apple, "LDA_reviews_apple")
saveLDA(LDA_reviews_cellphone, "LDA_reviews_cellphone")
saveLDA(LDA_reviews_apple, "LDA_reviews_apple")
saveLDA(LDA_reviews_samsung, "LDA_reviews_samsung")
saveLDA(LDA_reviews_coffee, "LDA_reviews_coffee")
saveLDA(LDA_reviews_toaster, "LDA_reviews_toaster")
rm(list=ls())
prep_headphone_brand  <- fread("/Volumes/OMEGA/Dataset/prepared_data/prep_headphone_brand.csv")
# SENTIMENT ANALYSIS ON ONLINE REVIEWS #
# dataImport.R
# LOAD PACKAGES
library(data.table)
prep_headphone_brand  <- fread("/Volumes/OMEGA/Dataset/prepared_data/prep_headphone_brand.csv")
names(prep_headphone_brand)
prep_headphone_brand$categories.0.0 <- prep_headphone_brand$categories.0.1 <- prep_headphone_brand$reviewTime <- prep_headphone_brand$description
# Make as tibble, otherwise they can't be proceeded by the tidy tokenizer
makeTibble <- function(input){
as_tibble(input)
}
prep_headphone_brand <- makeTibble(prep_headphone_brand)
# dataPrep.R
library(dplyr)
prep_headphone_brand <- makeTibble(prep_headphone_brand)
createID <- function(input){
document <- paste(input$asin, input$reviewerID, sep = "-")
return(document)
}
dtm_headphone_brand$document <- createID(dtm_headphone_brand)
dtm_headphone_brand <- prep_headphone_brand
# SPLIT INTO WORDS
dtm_wordByReview <- function(input) {
input %>%
unnest_tokens(word, review)
}
dtm_headphone_byReview <- dtm_wordByReview(dtm_headphone_brand)
library(tidytext)
dtm_headphone_byReview <- dtm_wordByReview(dtm_headphone_brand)
dtm_docDetect <- function(input) {
input %>%
anti_join(stop_words) %>%
select(document) %>%
distinct()
}
dtm_detect_headphone <- dtm_docDetect(dtm_headphone_byReview)
createID <- function(input){
document <- paste(input$asin, input$reviewerID, sep = "-")
return(document)
}
dtm_headphone_brand$document <- createID(dtm_headphone_brand)
dtm_headphone_byReview <- dtm_wordByReview(dtm_headphone_brand)
dtm_detect_headphone <- dtm_docDetect(dtm_headphone_byReview)
merged_topic_headphone <- dtm_join(dtm_headphone_brand, dtm_docDetect(dtm_headphone_byReview))
dtm_join <- function(input, filtered) {
input %>%
inner_join(filtered)
}
merged_topic_headphone <- dtm_join(dtm_headphone_brand, dtm_docDetect(dtm_headphone_byReview))
dtm_headphone_wordCounts <- dtm_wordCounts(dtm_headphone_byReview)
dtm_wordCounts <- function(input) {
input %>%
anti_join(stop_words) %>%
count(document, word, sort = TRUE) %>%
ungroup()
}
dtm_headphone_wordCounts <- dtm_wordCounts(dtm_headphone_byReview)
dtmCreator <- function(input) {
input %>%
cast_dtm(document, word, n)
}
dtm_headphone <- dtmCreator(dtm_headphone_wordCounts)
library(tm)
dtm_headphone_sparse <- removeSparseTerms(dtm_headphone, 0.97)
dtm_headphone_sparse
dtm_headphone
saveRDS(dtm_headphone, "output/dtm.rds")
LDA_reviews_headphone <- createLDA(dtm_headphone_sparse)
createLDA <- function(input) {
# Find the sum of words in each Document to detect if there are empty ones
rowTotals <- apply(input , 1, sum)
input <- input[rowTotals> 0, ]
# Set parameters for LDA
burnin <- 4000
iter <- 2000
thin <- 500
seed <-list(2003,5,63,100001,765)
nstart <- 5
best <- TRUE
# Number of topics
k <- 5
# Create LDA model using Gibbs sampling
ldamodel <- LDA(input,k, method="Gibbs", control=list(nstart=nstart, seed = seed, best=best, burnin = burnin, iter = iter, thin=thin))
return(ldamodel)
}
