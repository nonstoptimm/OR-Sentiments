scoreToasterAFINN <- sentimentScoreAFINN(wf_toaster_brand, top10brands_toaster)
scoreCoffeeAFINN <- sentimentScoreAFINN(wf_coffee_brand, top10brands_coffee)
# Apply plotSentimentScoreAFINN-function
plotSentimentScoreAFINN(scoreCellphoneAFINN, nameBrandCellphone , "Cellphones")
plotSentimentScoreAFINN(scoreHeadphoneAFINN, nameBrandHeadphone,"Headphones")
plotSentimentScoreAFINN(scoreToasterAFINN, nameBrandToaster, "Toaster")
# CREATE BOXPLOT FOR OVERALL VS. SCORENN
boxplotScoreNN <- function(input, cat){
input$overall <- as.factor(input$overall)
ggplot(input, aes(x=overall, y=scoreNN)) +
geom_boxplot() +
theme(text = element_text(size=18), plot.title = element_text(size = 14, face = "bold")) +
ggtitle(paste("ML-Sentiment-Score vs. Overall Rating for", cat, sep = " ")) +
ylim(-5,3)
}
# Apply boxplotScore-function
boxplotScoreLX(prep_headphone_brand, "Headphones")
# CREATE BOXPLOT FOR OVERALL VS. SCORELX
boxplotScoreNN <- function(input, cat){
input$overall <- as.factor(input$overall)
ggplot(input, aes(x=overall, y=scoreLX)) +
geom_boxplot() +
theme(text = element_text(size=18), plot.title = element_text(size = 14, face = "bold")) +
ggtitle(paste("Lexicon-Sentiment-Score vs. Overall Rating for", cat, sep = " ")) +
ylim(-5,3)
}
# CREATE BOXPLOT FOR OVERALL VS. SCORELX
boxplotScoreLX <- function(input, cat){
input$overall <- as.factor(input$overall)
ggplot(input, aes(x=overall, y=scoreLX)) +
geom_boxplot() +
theme(text = element_text(size=18), plot.title = element_text(size = 14, face = "bold")) +
ggtitle(paste("Lexicon-Sentiment-Score vs. Overall Rating for", cat, sep = " ")) +
ylim(-5,3)
}
# Apply boxplotScore-function
boxplotScoreNN(prep_headphone_brand, "Headphones")
# CREATE BOXPLOT FOR OVERALL VS. SCORELX
boxplotScoreLX <- function(input, cat){
input$overall <- as.factor(input$overall)
ggplot(input, aes(x=overall, y=scoreLX)) +
geom_boxplot() +
theme(text = element_text(size=18), plot.title = element_text(size = 14, face = "bold")) +
#ylim(-5,3) +
ggtitle(paste("Lexicon-Sentiment-Score vs. Overall Rating for", cat, sep = " "))
}
# Apply boxplotScore-function
boxplotScoreNN(prep_headphone_brand, "Headphones")
# CREATE BOXPLOT FOR OVERALL VS. SCORELX
boxplotScoreLX <- function(input, cat){
input$overall <- as.factor(input$overall)
ggplot(input, aes(x=overall, y=na.omit(scoreLX))) +
geom_boxplot() +
theme(text = element_text(size=18), plot.title = element_text(size = 14, face = "bold")) +
#ylim(-5,3) +
ggtitle(paste("Lexicon-Sentiment-Score vs. Overall Rating for", cat, sep = " "))
}
# Apply boxplotScore-function
boxplotScoreNN(prep_headphone_brand, "Headphones")
table(is.na(prep_headphone_brand$scoreLX))
# CREATE BOXPLOT FOR OVERALL VS. SCORELX
boxplotScoreLX <- function(input, cat){
input$overall <- as.factor(input$overall)
ggplot(input, aes(x=overall, y=na.omit(scoreLX))) +
geom_boxplot() +
theme(text = element_text(size=18), plot.title = element_text(size = 14, face = "bold")) +
ggtitle(paste("Lexicon-Sentiment-Score vs. Overall Rating for", cat, sep = " "))
}
# Apply boxplotScore-function
boxplotScoreLX(prep_headphone_brand, "Headphones")
# CREATE BOXPLOT FOR OVERALL VS. SCORELX
boxplotScoreLX <- function(input, cat){
input$overall <- as.factor(input$overall)
ggplot(input, aes(x=overall, y=scoreLX)) +
geom_boxplot() +
theme(text = element_text(size=18), plot.title = element_text(size = 14, face = "bold")) +
ggtitle(paste("Lexicon-Sentiment-Score vs. Overall Rating for", cat, sep = " "))
}
# Apply boxplotScore-function
boxplotScoreLX(prep_headphone_brand, "Headphones")
boxplotScoreLX(prep_cellphone_brand, "Cellphones")
boxplotScoreLX(prep_toaster_brand, "Toasters")
boxplotScoreLX(prep_coffee_brand, "Coffee Makers")
min(prep_toaster_brand$scoreLX)
min(prep_headphone_brand$scoreLX)
min(prep_cellphone_brand$scoreLX)
prep_headphone_brand %>% filter(scoreLX == -4)
max(prep_cellphone_brand$scoreLX)
max(prep_toaster_brand$scoreLX)
max(prep_headphone_brand$scoreLX)
# CREATE BOXPLOT FOR OVERALL VS. SCORELX
boxplotScoreLX <- function(input, cat){
input$overall <- as.factor(input$overall)
ggplot(input, aes(x=overall, y=scoreLX)) +
geom_boxplot() +
theme(text = element_text(size=18), plot.title = element_text(size = 14, face = "bold")) +
ylim(-4,5)
ggtitle(paste("Lexicon-Sentiment-Score vs. Overall Rating for", cat, sep = " "))
}
# Apply boxplotScore-function
boxplotScoreLX(prep_headphone_brand, "Headphones")
# CREATE BOXPLOT FOR OVERALL VS. SCORELX
boxplotScoreLX <- function(input, cat){
input$overall <- as.factor(input$overall)
ggplot(input, aes(x=overall, y=scoreLX)) +
geom_boxplot() +
theme(text = element_text(size=18), plot.title = element_text(size = 14, face = "bold")) +
ylim(-4,5) +
ggtitle(paste("Lexicon-Sentiment-Score vs. Overall Rating for", cat, sep = " "))
}
# Apply boxplotScore-function
boxplotScoreLX(prep_headphone_brand, "Headphones")
boxplotScoreLX(prep_cellphone_brand, "Cellphones")
boxplotScoreLX(prep_toaster_brand, "Toasters")
boxplotScoreLX(prep_headphone_brand, "Headphones")
boxplotScoreLX(prep_cellphone_brand, "Cellphones")
boxplotScoreLX(prep_toaster_brand, "Toasters")
boxplotScoreLX(prep_coffee_brand, "Coffee Makers")
prep_toaster_brand %>% filter(scoreLX == -4)
prep_headphone_brand %>% filter(scoreLX == -4)
prep_cellphone_brand %>% filter(scoreLX == -4)
prep_toaster_brand %>% filter(scoreLX == -4)
prep_coffee_brand %>% filter(scoreLX == -4)
prep_coffee_brand %>% filter(scoreLX == 5)
prep_toaster_brand %>% filter(scoreLX == 5)
prep_cellphone_brand %>% filter(scoreLX == 5)
prep_headphone_brand %>% filter(scoreLX == 5)
# CREATE BOXPLOT FOR OVERALL VS. SCORELX
boxplotScoreLX <- function(input, cat){
input$overall <- as.factor(input$overall)
ggplot(input, aes(x=overall, y=scoreLX)) +
geom_boxplot() +
theme(text = element_text(size=18), plot.title = element_text(size = 14, face = "bold")) +
ylim(-4,5) +
geom_hline(aes(yintercept=mean(.), color="mean"), size=1) +
scale_color_manual(name = "Statistics", values = c(mean = "red")) +
ggtitle(paste("Lexicon-Sentiment-Score vs. Overall Rating for", cat, sep = " "))
}
# Apply boxplotScore-function
boxplotScoreLX(prep_headphone_brand, "Headphones")
# CREATE BOXPLOT FOR OVERALL VS. SCORELX
boxplotScoreLX <- function(input, cat){
input$overall <- as.factor(input$overall)
ggplot(input, aes(x=overall, y=scoreLX)) +
geom_boxplot() +
theme(text = element_text(size=18), plot.title = element_text(size = 14, face = "bold")) +
ylim(-4,5) +
geom_hline(aes(yintercept=mean(scoreLX), color="mean"), size=1) +
scale_color_manual(name = "Statistics", values = c(mean = "red")) +
ggtitle(paste("Lexicon-Sentiment-Score vs. Overall Rating for", cat, sep = " "))
}
# Apply boxplotScore-function
boxplotScoreLX(prep_headphone_brand, "Headphones")
# CREATE BOXPLOT FOR OVERALL VS. SCORELX
boxplotScoreLX <- function(input, cat){
input$overall <- as.factor(input$overall)
ggplot(input, aes(x=overall, y=scoreLX)) +
geom_boxplot() +
theme(text = element_text(size=18), plot.title = element_text(size = 14, face = "bold")) +
ylim(-4,5) +
#geom_hline(aes(yintercept=mean(scoreLX), color="mean"), size=1) +
#scale_color_manual(name = "Statistics", values = c(mean = "red")) +
ggtitle(paste("Lexicon-Sentiment-Score vs. Overall Rating for", cat, sep = " "))
}
# Apply boxplotScore-function
boxplotScoreLX(prep_headphone_brand, "Headphones")
# MEAN FOR SENTIMENT SCORE: NN AND OVERALL
calcMeanScore <- function(input, inputScore) {
mean_overall <- mean(input$overall)
mean_score_total <- mean(inputScore)
mean_scores <- c()
mean_scores <- c(mean_scores, mean_overall, mean_score_total)
for(star in 1:5) {
current_score <- input %>% filter(overall == star) %>% summarise(mean(scoreNN))
mean_scores <- c(mean_scores, current_score)
}
mean_scores <- round(as.numeric(mean_scores), 5)
names(mean_scores) <- c("Mean Stars", "Mean Score", "MS1", "MS2", "MS3", "MS4", "MS5")
return(as.data.frame(mean_scores))
}
# Calculate Means for Sentiment Scores
# Cellphone
calcMeanScore(prep_cellphone_brand, prep_cellphone_brand$scoreLX)
# MEAN FOR SENTIMENT SCORE: NN AND OVERALL
calcMeanScore <- function(input, inputScore) {
mean_overall <- mean(input$overall)
mean_score_total <- mean(inputScore)
mean_scores <- c()
mean_scores <- c(mean_scores, mean_overall, mean_score_total)
for(star in 1:5) {
current_score <- input %>% filter(overall == star) %>% summarise(mean(inputScore))
mean_scores <- c(mean_scores, current_score)
}
mean_scores <- round(as.numeric(mean_scores), 5)
names(mean_scores) <- c("Mean Stars", "Mean Score", "MS1", "MS2", "MS3", "MS4", "MS5")
return(as.data.frame(mean_scores))
}
# Calculate Means for Sentiment Scores
# Cellphone
calcMeanScore(prep_cellphone_brand, prep_cellphone_brand$scoreLX)
# MEAN FOR SENTIMENT SCORE: NN AND OVERALL
calcMeanScore <- function(input, inputScore) {
mean_overall <- mean(input$overall)
mean_score_total <- mean(inputScore)
mean_scores <- c()
mean_scores <- c(mean_scores, mean_overall, mean_score_total)
for(star in 1:5) {
current_score <- input %>% filter(overall == star) %>% summarise(mean(scoreNN))
mean_scores <- c(mean_scores, current_score)
}
mean_scores <- round(as.numeric(mean_scores), 5)
names(mean_scores) <- c("Mean Stars", "Mean Score", "MS1", "MS2", "MS3", "MS4", "MS5")
return(as.data.frame(mean_scores))
}
# Calculate Means for Sentiment Scores
# Cellphone
calcMeanScore(prep_cellphone_brand)
# MEAN FOR SENTIMENT SCORE: NN AND OVERALL
calcMeanScore <- function(input) {
mean_overall <- mean(input$overall)
mean_score_total <- mean(input$scoreNN)
mean_scores <- c()
mean_scores <- c(mean_scores, mean_overall, mean_score_total)
for(star in 1:5) {
current_score <- input %>% filter(overall == star) %>% summarise(mean(scoreNN))
mean_scores <- c(mean_scores, current_score)
}
mean_scores <- round(as.numeric(mean_scores), 5)
names(mean_scores) <- c("Mean Stars", "Mean Score", "MS1", "MS2", "MS3", "MS4", "MS5")
return(as.data.frame(mean_scores))
}
# Calculate Means for Sentiment Scores
# Cellphone
calcMeanScore(prep_cellphone_brand)
calcMeanScoreNN <- function(input) {
mean_overall <- mean(input$overall)
mean_score_total <- mean(input$scoreLX)
mean_scores <- c()
mean_scores <- c(mean_scores, mean_overall, mean_score_total)
for(star in 1:5) {
current_score <- input %>% filter(overall == star) %>% summarise(mean(scoreLX))
mean_scores <- c(mean_scores, current_score)
}
mean_scores <- round(as.numeric(mean_scores), 5)
names(mean_scores) <- c("Mean Stars", "Mean Score", "MS1", "MS2", "MS3", "MS4", "MS5")
return(as.data.frame(mean_scores))
}
# Calculate Means for Sentiment Scores
# Cellphone
calcMeanScoreLX(prep_cellphone_brand)
# MEAN FOR SENTIMENT SCORE: NN AND OVERALL
calcMeanScoreLX <- function(input) {
mean_overall <- mean(input$overall)
mean_score_total <- mean(input$scoreNN)
mean_scores <- c()
mean_scores <- c(mean_scores, mean_overall, mean_score_total)
for(star in 1:5) {
current_score <- input %>% filter(overall == star) %>% summarise(mean(scoreNN))
mean_scores <- c(mean_scores, current_score)
}
mean_scores <- round(as.numeric(mean_scores), 5)
names(mean_scores) <- c("Mean Stars", "Mean Score", "MS1", "MS2", "MS3", "MS4", "MS5")
return(as.data.frame(mean_scores))
}
# Calculate Means for Sentiment Scores
# Cellphone
calcMeanScoreLX(prep_cellphone_brand)
calcMeanScoreNN(prep_cellphone_brand)
calcMeanScoreNN <- function(input) {
mean_overall <- mean(input$overall)
mean_score_total <- mean(input$scoreNN)
mean_scores <- c()
mean_scores <- c(mean_scores, mean_overall, mean_score_total)
for(star in 1:5) {
current_score <- input %>% filter(overall == star) %>% summarise(mean(scoreNN))
mean_scores <- c(mean_scores, current_score)
}
mean_scores <- round(as.numeric(mean_scores), 5)
names(mean_scores) <- c("Mean Stars", "Mean Score", "MS1", "MS2", "MS3", "MS4", "MS5")
return(as.data.frame(mean_scores))
}
# MEAN FOR SENTIMENT SCORE: NN AND OVERALL
calcMeanScoreLX <- function(input) {
mean_overall <- mean(input$overall)
mean_score_total <- mean(input$scoreLX)
mean_scores <- c()
mean_scores <- c(mean_scores, mean_overall, mean_score_total)
for(star in 1:5) {
current_score <- input %>% filter(overall == star) %>% summarise(mean(scoreLX))
mean_scores <- c(mean_scores, current_score)
}
mean_scores <- round(as.numeric(mean_scores), 5)
names(mean_scores) <- c("Mean Stars", "Mean Score", "MS1", "MS2", "MS3", "MS4", "MS5")
return(as.data.frame(mean_scores))
}
calcMeanScoreNN <- function(input) {
mean_overall <- mean(input$overall)
mean_score_total <- mean(input$scoreNN)
mean_scores <- c()
mean_scores <- c(mean_scores, mean_overall, mean_score_total)
for(star in 1:5) {
current_score <- input %>% filter(overall == star) %>% summarise(mean(scoreNN))
mean_scores <- c(mean_scores, current_score)
}
mean_scores <- round(as.numeric(mean_scores), 5)
names(mean_scores) <- c("Mean Stars", "Mean Score", "MS1", "MS2", "MS3", "MS4", "MS5")
return(as.data.frame(mean_scores))
}
# Calculate Means for Sentiment Scores
# Cellphone
calcMeanScoreLX(prep_cellphone_brand)
calcMeanScoreNN(prep_cellphone_brand)
# STANDARD DEVIATION SCORE: NN
calcSdScoreLX <- function(input) {
var_overall <- sd(input$scoreLX)
sd_scores <- c()
sd_scores <- c(sd_scores, var_overall)
for(star in 1:5) {
current_score <- input %>% filter(overall == star) %>% summarize(sd(scoreLX))
sd_scores <- c(sd_scores, current_score)
}
sd_scores <- round(as.numeric(sd_scores), 5)
names(sd_scores) <- c("SdG", "Sd1", "Sd2", "Sd3", "Sd4", "Sd5")
return(as.data.frame(sd_scores))
}
calcSdScoreNN <- function(input) {
var_overall <- sd(input$scoreNN)
sd_scores <- c()
sd_scores <- c(sd_scores, var_overall)
for(star in 1:5) {
current_score <- input %>% filter(overall == star) %>% summarize(sd(scoreNN))
sd_scores <- c(sd_scores, current_score)
}
sd_scores <- round(as.numeric(sd_scores), 5)
names(sd_scores) <- c("SdG", "Sd1", "Sd2", "Sd3", "Sd4", "Sd5")
return(as.data.frame(sd_scores))
}
calcVarScoreNN <- function(input) {
var_overall <- var(input$scoreNN)
var_scores <- c()
var_scores <- c(var_scores, var_overall)
for(star in 1:5) {
current_score <- input %>% filter(overall == star) %>% summarize(var(scoreNN))
var_scores <- c(var_scores, current_score)
}
var_scores <- round(as.numeric(var_scores), 5)
names(var_scores) <- c("VarG", "Var1", "Var2", "Var3", "Var4", "Var5")
return(as.data.frame(var_scores))
}
# VARIANCE FOR SENTIMENT SCORE: NN
calcVarScoreLX <- function(input) {
var_overall <- var(input$scoreLX)
var_scores <- c()
var_scores <- c(var_scores, var_overall)
for(star in 1:5) {
current_score <- input %>% filter(overall == star) %>% summarize(var(scoreLX))
var_scores <- c(var_scores, current_score)
}
var_scores <- round(as.numeric(var_scores), 5)
names(var_scores) <- c("VarG", "Var1", "Var2", "Var3", "Var4", "Var5")
return(as.data.frame(var_scores))
}
# MEAN FOR SENTIMENT SCORE: LX AND OVERALL
calcMeanScoreNN <- function(input) {
mean_overall <- mean(input$overall)
mean_score_total <- mean(input$scoreNN)
mean_scores <- c()
mean_scores <- c(mean_scores, mean_overall, mean_score_total)
for(star in 1:5) {
current_score <- input %>% filter(overall == star) %>% summarise(mean(scoreNN))
mean_scores <- c(mean_scores, current_score)
}
mean_scores <- round(as.numeric(mean_scores), 5)
names(mean_scores) <- c("Mean Stars", "Mean Score", "MS1", "MS2", "MS3", "MS4", "MS5")
return(as.data.frame(mean_scores))
}
# MEAN FOR SENTIMENT SCORE: NN AND OVERALL
calcMeanScoreLX <- function(input) {
mean_overall <- mean(input$overall)
mean_score_total <- mean(input$scoreLX)
mean_scores <- c()
mean_scores <- c(mean_scores, mean_overall, mean_score_total)
for(star in 1:5) {
current_score <- input %>% filter(overall == star) %>% summarise(mean(scoreLX))
mean_scores <- c(mean_scores, current_score)
}
mean_scores <- round(as.numeric(mean_scores), 5)
names(mean_scores) <- c("Mean Stars", "Mean Score", "MS1", "MS2", "MS3", "MS4", "MS5")
return(as.data.frame(mean_scores))
}
# CORRELATION COEFFICIENT: SCORE LX & NN
corrCoeffLX <- function(input) {
correlation <- cor(input$overall, input$scoreNN)
return(correlation)
}
corrCoeffNN <- function(input) {
correlation <- cor(input$overall, input$scoreNN)
return(correlation)
}
# CORRELATION COEFFICIENT: SCORE LX & NN
corrCoeffLX <- function(input) {
correlation <- cor(input$overall, input$scoreLX)
return(correlation)
}
corrCoeffNN <- function(input) {
correlation <- cor(input$overall, input$scoreNN)
return(correlation)
}
# Calculate Correlation Coefficient for Sentiment Scores
# Cellphone
corrCoeffLX(prep_cellphone_brand)
corrCoeffNN(prep_cellphone_brand)
# fwrite(corrCoeff(merged_topic_samsung), "output/cor_cellphone.csv")
# Toaster
corrCoeffLX(prep_toaster_brand)
corrCoeffNN(prep_toaster_brand)
# fwrite(corrCoeff(prep_toaster_brand), "output/cor_toaster.csv")
# Coffee
corrCoeffLX(prep_coffee_brand)
corrCoeffNN(prep_coffee_brand)
# fwrite(corrCoeff(prep_coffee_brand), "output/cor_coffee.csv")
# Headphone
corrCoeffLX(prep_headphone_brand)
corrCoeffNN(prep_headphone_brand)
# Calculate Means for Sentiment Scores
# Headphone
calcMeanScoreLX(prep_headphone_brand)
calcMeanScoreNN(prep_headphone_brand)
# fwrite(calcMeanScore(merged_topic_coffee), "output/mean_headphone.csv")
# Cellphone
calcMeanScoreLX(prep_cellphone_brand)
calcMeanScoreNN(prep_cellphone_brand)
calcMeanScoreNN(prep_toaster_brand)
# fwrite(calcMeanScore(prep_toaster_brand), "output/mean_toaster.csv")
# Coffee
calcMeanScoreLX(prep_coffee_brand)
calcMeanScoreNN(prep_toaster_brand)
# fwrite(calcMeanScore(prep_cellphone_brand), "output/mean_cellphone.csv")
# Toaster
calcMeanScoreLX(prep_toaster_brand)
# VARIANCE FOR SENTIMENT SCORE: LX & NN
calcVarScoreLX <- function(input) {
var_overall <- var(input$scoreLX)
var_scores <- c()
var_scores <- c(var_scores, var_overall)
for(star in 1:5) {
current_score <- input %>% filter(overall == star) %>% summarize(var(scoreLX))
var_scores <- c(var_scores, current_score)
}
var_scores <- round(as.numeric(var_scores), 5)
names(var_scores) <- c("VarG", "Var1", "Var2", "Var3", "Var4", "Var5")
return(as.data.frame(var_scores))
}
# Calculate Variance Deviation for Sentiment Scores
# Headphone
calcVarScoreLX(prep_headphone_brand)
#fwrite(calcVarScore(prep_headphone_brand), "output/var_headphone.csv")
# Cellphones
calcVarScoreLX(prep_cellphone_brand)
#fwrite(calcVarScore(prep_cellphone_brand), "output/var_cellphone.csv")
# Toaster
calcVarScoreLX(prep_toaster_brand)
#fwrite(calcVarScore(prep_toaster_brand), "output/var_toaster.csv")
# Coffee
calcVarScoreLX(prep_coffee_brand)
# Calculate Standard Deviation for Sentiment Scores
# Headphone
calcSdScoreLX(prep_headphone_brand)
# fwrite(calcSdScore(prep_headphone_brand), "output/sd_headphone.csv")
# Cellphone
calcSdScoreLX(prep_cellphone_brand)
#fwrite(sd_cellphone, "output/sd_cellphone.csv")
# Toaster
calcSdScoreLX(prep_cellphone_brand)
# fwrite(calcSdScore(prep_toaster_brand), "output/sd_toaster.csv")
# Coffee
calcSdScoreLX(prep_coffee_brand)
#fwrite(sd_cellphone, "output/sd_cellphone.csv")
# Toaster
calcSdScoreLX(prep_toaster_brand)
# Calculate Correlation Coefficient for Sentiment Scores
# Cellphone
corrCoeffLX(prep_cellphone_brand)
# fwrite(corrCoeff(merged_topic_samsung), "output/cor_cellphone.csv")
# Toaster
corrCoeffLX(prep_toaster_brand)
# fwrite(corrCoeff(prep_toaster_brand), "output/cor_toaster.csv")
# Coffee
corrCoeffLX(prep_coffee_brand)
# fwrite(corrCoeff(prep_coffee_brand), "output/cor_coffee.csv")
# Headphone
corrCoeffLX(prep_headphone_brand)
# fwrite(corrCoeff(prep_coffee_brand), "output/cor_headphone.csv")
# Cellphone
corrCoeffLX(prep_cellphone_brand)
min(prep_cellphone_brand$scoreLX)
median(prep_cellphone_brand$scoreLX)
median(prep_headpone_brand$scoreLX)
median(prep_headphone_brand$scoreLX)
median(prep_coffee_brand$scoreLX)
median(prep_toaster_brand$scoreLX)
# MIN, MAX, MEDIAN
calcMinMaxMedian <- function(input) {
minScore <- min(input)
maxScore <- max(input)
medScore <- median(input)
scoreDF <- c()
scoreDF <- c(minScore, maxScore, medScore)
names(scoreDF) <- c("Min", "Max", "Median")
return(as.data.frame(scoreDF))
}
calcMinMaxMedian(prep_toaster_brand$scoreLX)
