}
deleteNotEnglish <- function(input) {
input %>%
filter(!reviewLanguage == "english")
}
table(merged_cellphone$reviewLanguage)
merged_cellphone <- deleteNotEnglish(merged_cellphone)
table(merged_cellphone$reviewLanguage)
deleteNotEnglish <- function(input) {
input %>%
filter(reviewLanguage == "english")
}
merged_cellphone <- joinData(raw_cellphone, meta_cellphone)
merged_cellphone$categories.0.3 <- NULL
merged_cellphone$categories.0.4 <- NULL
merged_cellphone$review <- correctContraction(merged_cellphone$review, contraction_list)
merged_cellphone$reviewLanguage <- detectLanguage(merged_cellphone$review)
library(textcat)
merged_cellphone$reviewLanguage <- detectLanguage(merged_cellphone$review)
deleteNotEnglish <- function(input) {
input %>%
filter(reviewLanguage == "english")
}
merged_cellphone <- deleteNotEnglish(merged_cellphone)
tokenized_cellphone <- tokenizeReview(merged_cellphone)
tokenized_cellphone <- removeStopwords(tokenized_cellphone)
countWords(tokenized_cellphone)
countWordsUnw(tokenized_cellphone, c("phone", "phones", "2", "buy", "bought", "product", "nice"))
countWordsBrand(tokenized_cellphone)
countWords <- function(input) {
#input %>%
#group_by(word) %>%
#summarise(num_words = n()) %>%
#arrange(desc(num_words))
input %>%
count(word, sort = TRUE)
}
countWords(tokenized_cellphone)
countWordsUnw <- function(input, unwanted) {
input %>%
#    group_by(word) %>%
#    summarise(num_words = n()) %>%
#    arrange(desc(num_words)) %>%
filter(!word %in% unwanted) %>%
count(word, sort = TRUE)
}
countWordsUnw(tokenized_cellphone, c("phone", "phones", "2", "buy", "bought", "product", "nice"))
countWordsCellphone <- countWordsUnw(tokenized_cellphone, c("phone", "phones", "2", "buy", "bought", "product", "nice"))
countWordsCellBrand <- countWordsBrand(tokenized_cellphone)
tf_idf_brand <- function(input) {
input %>%
bind_tf_idf(word, brand, n) %>%
arrange(desc(tf_idf))
}
tf_idf_brand(countWordsCellBrand)
head(merged_cellphone$review)
gsub("\\.", " ", "reviews.bla . bla blu.bla")
gsub("\\.", " ", "reviews.bla . bla blu.bla,sinshit , s")
gsub("\\,", " ", "reviews.bla . bla blu.bla,sinshit , s")
correctContraction <- function(reviews, contraction_list) {
for(pattern in 1:nrow(contraction_list)) {
reviews <- gsub("&#8217;", "'", reviews)
reviews <- gsub(contraction_list$contraction[pattern], contraction_list$full[pattern], reviews, ignore.case =TRUE)
reviews <- gsub("\\$", " dollar ", reviews)
reviews <- gsub("\\%", " percent ", reviews)
reviews <- gsub("\\.", " ", reviews)
reviews <- gsub("\\,", " ", reviews)
}
return(reviews)
}
merged_cellphone$review <- correctContraction(merged_cellphone$review, contraction_list)
library(textstem)
install.packages("textstem")
library(textstem)
x <- c(
'the dirtier dog has eaten the pies',
'that shameful pooch is tricky and sneaky',
"He opened and then reopened the food bag",
'There are skies of blue and red roses too!',
NA,
"The doggies, well they aren't joyfully running.",
"The daddies are coming over...",
"This is 34.546 above")
lemmatize_strings(x)
x <- c(x, "this is not good")
lemmatize_strings(x)
data(presidential_debates_2012)
head(presidential_debates_2012)
textstem(x)
stem_words(x)
x
stem_strings(x)
lemmatize_strings(x)
lemmatize_words(iphones)
lemmatize_words("iphones")
lemmatize_words("smartphones")
lemmatize_words("phones")
lemmatize_words("songs")
lemmatize_words("orders)
lemmatize_words("orders")
lemmatize_words("deliveries")
gsub("\\W", " ", "so ein, mist.bullshit . yes, ")
gsub("\\W", " ", "so ein, mist.bullshit . yes, ")
correctContraction <- function(reviews, contraction_list) {
for(pattern in 1:nrow(contraction_list)) {
reviews <- gsub("&#8217;", "'", reviews)
reviews <- gsub(contraction_list$contraction[pattern], contraction_list$full[pattern], reviews, ignore.case =TRUE)
reviews <- gsub("\\$", " dollar ", reviews)
reviews <- gsub("\\%", " percent ", reviews)
reviews <- gsub("\\.", " ", reviews)
reviews <- gsub("\\W", " ", reviews)
}
return(reviews)
}
correctContraction <- function(reviews, contraction_list) {
for(pattern in 1:nrow(contraction_list)) {
reviews <- gsub("&#8217;", "'", reviews)
reviews <- gsub(contraction_list$contraction[pattern], contraction_list$full[pattern], reviews, ignore.case =TRUE)
reviews <- gsub("\\$", " dollar ", reviews)
reviews <- gsub("\\%", " percent ", reviews)
reviews <- gsub("\\W", " ", reviews)
}
return(reviews)
}
merged_cellphone$review <- correctContraction(merged_cellphone$review, contraction_list)
head(presidential_debates_2012)
head(merged_cellphone$review)
lemmatize_strings(merged_cellphone$review[1:3])
lemmatize_strings(tokenized_cellphone$word[1:20])
lemmatizeText <- function(input) {
input %>% lemmatize_strings()
}
lemmatizeText(merged_cellphone$review[1:3])
# Apply to dataset
merged_cellphone$review <- lemmatizeText(merged_cellphone$review[1:3])
merged_cellphone <- joinData(raw_cellphone, meta_cellphone)
merged_cellphone$categories.0.3 <- NULL
merged_cellphone$categories.0.4 <- NULL
merged_cellphone$review
merged_cellphone$review <- sapply(merged_cellphone$review, tolower)
merged_cellphone$reviewLanguage <- detectLanguage(merged_cellphone$review)
table(merged_cellphone$reviewLanguage)
merged_cellphone %>% filter(reviewLanguage == "spanish") %>% select(review)
detectLanguage <- function(input) {
langProfile <- TC_byte_profiles[names(TC_byte_profiles) %in% c("english", "french", "spanish", "german")]
reviewLanguage <- textcat(input, p = langProfile)
return(reviewLanguage)
}
TC_byte_profiles
?textcat
detectLanguage <- function(input) {
langProfile <- TC_byte_profiles[names(TC_byte_profiles) %in% c("english", "french", "spanish", "german", "italian", "portuguese")]
reviewLanguage <- textcat(input, p = langProfile)
return(reviewLanguage)
}
merged_cellphone$reviewLanguage <- detectLanguage(merged_cellphone$review)
table(merged_cellphone$reviewLanguage)
rm(countWordsCellBrand)
rm(countWordsCellphone)
rm(lexDiv_Cellphone)
rm(metadata)
rm(rawdata)
rm(tfidf_cellphone)
rm(tfidf_cellphone_top)
tm(tokenized_cellphone)
rm(tokenized_cellphone)
rm(presidential_debates_2012)
rm(merged_cellphone)
rm(meta_cellphone)
rm(raw_cellphone)
rm(correct)
rm(unwanted_cellphone)
rm(words)
rm(x)
?fread
library(data.table)
merged_cellphone <- fread("input-data/merged_cellphone.csv")
head(merged_cellphone)
names(merged_cellphone)
merged_cellphone <- fread("input-data/merged_cellphone.csv", progress = T)
View(merged_cellphone)
merged_cellphone_brand <- fread("input-data/merged_cellphone_brand.csv")
merged_toaster_brand <- fread("input-data/merged_toaster_brand.csv")
merged_coffee_brand <- fread("input-data/merged_coffee_brand.csv")
merged_headphone_brand <- fread("input-data/merged_headphone_brand.csv")
merged_headphone <- fread("input-data/merged_headphone.csv")
merged_coffee <- fread("input-data/merged_coffee.csv")
merged_toaster <- fread("input-data/merged_toaster.csv")
merged_cellphone <- fread("input-data/merged_cellphone.csv")
?fread
merged_cellphone <- fread("input-data/merged_cellphone.csv", showProgress = TRUE)
names(merged_cellphone)
names(merged_cellphone_brand)
names(merged_coffee_brand)
merged_coffee$reviewLanguage <- detectLanguage(merged_coffee$review)
merged_toaster$reviewLanguage <- detectLanguage(merged_toaster$review)
library(textcat)
merged_coffee$reviewLanguage <- detectLanguage(merged_coffee$review)
merged_toaster$reviewLanguage <- detectLanguage(merged_toaster$review)
table(merged_coffee$reviewLanguage)
table(merged_toaster$reviewLanguage)
merged_coffee <- deleteNotEnglish(merged_coffee)
merged_toaster <- deleteNotEnglish(merged_toaster)
library(dplyr)
merged_coffee <- deleteNotEnglish(merged_coffee)
merged_toaster <- deleteNotEnglish(merged_toaster)
merged_coffee_brand <- categorizeOnlyBranded(merged_coffee)
merged_toaster_brand <- categorizeOnlyBranded(merged_toaster)
categorizeOnlyBranded <- function(input){
input %>%
filter(!brand == "")
}
merged_coffee_brand <- categorizeOnlyBranded(merged_coffee)
merged_toaster_brand <- categorizeOnlyBranded(merged_toaster)
fwrite(merged_coffee, "input-data/merged_coffee.csv")
fwrite(merged_coffee_brand, "input-data/merged_coffee_brand.csv")
# EXPORT MERGED TOASTER
fwrite(merged_toaster, "input-data/merged_toaster.csv")
fwrite(merged_toaster_brand, "input-data/merged_toaster_brand.csv")
library(data.table)
fwrite(merged_coffee, "input-data/merged_coffee.csv")
fwrite(merged_coffee_brand, "input-data/merged_coffee_brand.csv")
# EXPORT MERGED TOASTER
fwrite(merged_toaster, "input-data/merged_toaster.csv")
fwrite(merged_toaster_brand, "input-data/merged_toaster_brand.csv")
merged_cellphone %>%
filter(reviewLanguage == "english") %>%
select(-reviewLanguage)
table(merged_cellphone$brand)
deleteNotEnglish <- function(input) {
input %>%
filter(reviewLanguage == "english") %>%
select(-reviewLanguage)
}
merged_cellphone <- deleteNotEnglish(merged_cellphone)
merged_headphone <- deleteNotEnglish(merged_headphone)
merged_coffee <- deleteNotEnglish(merged_coffee)
merged_toaster <- deleteNotEnglish(merged_toaster)
1:100
as.list(1:100)
as.data.frame(1:100)
as.array(1:100)
numbers <- as.data.frame(1:100)
View(numbers)
rm(numbers)
merged_toaster_brand$reviewLanguage <- NULL
merged_headphone_brand$reviewLanguage <- NULL
merged_coffee_brand$reviewLanguage <- NULL
merged_cellphone_brand$reviewLanguage <- NULL
fwrite(merged_toaster_brand, "input-data/merged_toaster_brand.csv")
fwrite(merged_coffee_brand, "input-data/merged_coffee_brand.csv")
fwrite(merged_headphone_brand, "input-data/merged_headphone_brand.csv")
fwrite(merged_cellphone_brand, "input-data/merged_cellphone_brand.csv")
score1 <- read.csv("/Users/Timm/score.csv", header = TRUE, sep = ";")
score2 <- read.csv("/Users/Timm/score1.csv", header = TRUE, sep = ";")
score2 <- read.csv("/Users/Timm/score2.csv", header = TRUE, sep = ";")
score <- rbind(score1, score2)
?rbind
library(data.table)
?rbind
score <- rbindlist(score1, score2)
score <- rbindlist(score1, score2, use.names = FALSE)
score <- rbindlist(score1, score2, use.names = TRUE)
score <- rbindlist(score1, score2, fill = FALSE, use.names = FALSE)
score <- rbindlist(score1, score2, fill = FALSE, use.names = TRUE)
score <- rbindlist(score1, score2, fill = TRUE, use.names = TRUE)
score <- rbindlist(c(score1, score2))
score <- rbindlist(list(score1, score2))
mean(score)
head(score)
score <- rbindlist(c(score1, score2), idcol="score")
score <- rbindlist(list(score1, score2), idcol="score")
names(score)
head(score)
rm(score)
score <- rbindlist(list(score1, score2), idcol="score")
head(score)
rm(score)
score <- rbindlist(list(score1, score2))
score3 <- read.csv("/Users/Timm/score3.csv", header = TRUE, sep = ";")
score <- rbindlist(list(score1, score2, score3))
score_toast <- read.csv("/Users/Timm/score_toast.csv", header = TRUE, sep = ";")
rm(score1)
rm(score2)
rm(score3)
tokenized_cellphone <- tokenizeReview(merged_cellphone)
library(dplyr)
library(stringr)
library(tidyr)
library(tidytext)
library(textcat)
tokenized_cellphone <- tokenizeReview(merged_cellphone)
get_sentiments("afinn")
merged_cellphone$review <- sapply(merged_cellphone$review, tolower)
merged_cellphone$brand <- sapply(merged_cellphone$brand, tolower)
correctContraction <- function(reviews, contraction_list) {
for(pattern in 1:nrow(contraction_list)) {
reviews <- gsub("&#8217;", "'", reviews)
reviews <- gsub(contraction_list$contraction[pattern], contraction_list$full[pattern], reviews, ignore.case =TRUE)
reviews <- gsub("\\$", " dollar ", reviews)
reviews <- gsub("\\%", " percent ", reviews)
reviews <- gsub("\\W", " ", reviews)
}
return(reviews)
}
merged_cellphone$review <- correctContraction(merged_cellphone$review, contraction_list)
tokenized_cellphone <- tokenizeReview(merged_cellphone)
countWords(tokenized_cellphone)
tokenized_cellphone <- removeStopwords(tokenized_cellphone)
countWords(tokenized_cellphone)
countWordsCellphone <- countWordsUnw(tokenized_cellphone, c("phone", "phones", "2", "buy", "bought", "product", "nice"))
countWordsUnw(tokenized_cellphone, c("phone", "phones", "2", "buy", "bought", "product", "nice"))
countWordsBrand(tokenized_cellphone)
countWordsCellBrand <- countWordsBrand(tokenized_cellphone)
tf_idf_general <- function(input) {
input %>%
bind_tf_idf(word, n) %>%
arrange(desc(tf_idf))
}
tf_idf_general(tokenized_cellphone)
tf_idf_brand(countWordsCellBrand)
y <- tf_idf_general(tokenized_cellphone)
tf_idf_general <- function(input) {
input %>%
bind_tf_idf(word, asin, n) %>%
arrange(desc(tf_idf))
}
y <- tf_idf_general(tokenized_cellphone)
tokenized_cellphone
names(tokenized_cellphone)
tf_idf_general <- function(input) {
input %>%
bind_tf_idf(word, asin, reviewerID, n) %>%
arrange(desc(tf_idf))
}
countWordsCellphone <- countWordsUnw(tokenized_cellphone, c("phone", "phones", "2", "buy", "bought", "product", "nice"))
tf_idf_general(countWordsCellphone)
countWordsBrand(tokenized_cellphone)
countWordsUnw(tokenized_cellphone, c("phone", "phones", "2", "buy", "bought", "product", "nice"))
countWordsUnw <- function(input, unwanted) {
input %>%
#    group_by(word) %>%
#    summarise(num_words = n()) %>%
#    arrange(desc(num_words)) %>%
filter(!word %in% unwanted) %>%
count(asin, reviewerID, word, sort = TRUE)
}
countWordsCellphone <- countWordsUnw(tokenized_cellphone, c("phone", "phones", "2", "buy", "bought", "product", "nice"))
y <- tf_idf_general(countWordsCellphone)
countWordsCellphone
score_toast <- read.csv("input-data/score_toast.csv", header = TRUE, sep = ";")
score_coffee <- read.csv("input-data/score_coffee.csv", header = TRUE, sep = ";")
dim(merged_coffee_brand)
head(merged_coffee_brand)
head(score_toast)
score_coffee <- read.csv("input-data/score_coffee.csv", header = TRUE, sep = ";")
score_toast <- read.csv("input-data/score_toast.csv", header = TRUE, sep = ";")
merged_cellphone_brand$score <- score_toast
merged_toaster_brand$score <- score_toast
head(merged_toaster_brand)
merged_toaster_brand %>% select(overall, score)
merged_toaster_brand$review[4]
merged_toaster_brand$review[493]
merged_toaster_brand$review[491]
merged_toaster_brand$review[467]
merged_coffee_brand$score <- score_coffee
merged_coffee_brand %>% select(overall, score)
mean(score_coffee)
str(score_coffee)
str(score_coffee$Score)
mean(score_coffee$Score)
summary(score_coffee$Score)
summary(score_toast$Score)
round(score_toast$Score, 3)
round(score_toast$Score, 4)
round(score_toast$Score, 5)
merged_toaster_brand %>% select(overall, round(score))
score_toast$ScoreRound <- round(score_toast$Score, 5)
merged_toaster_brand$scoreRound <- score_toast$ScoreRound
merged_toaster_brand %>% select(overall, score, scoreRound)
score_headphone <- read.csv("input-data/score_headphone.csv", header = TRUE, sep = ";")score_toast <- read.csv("input-data/score_toast.csv", header = TRUE, sep = ";")
score_coffee
addSentiScore <- function(input, sentiment) {
scoreRounded <- round(sentiment$Score, 5)
input$Score <- scoreRounded
}
addSentiScore <- function(sentiment) {
scoreRounded <- round(sentiment$Score, 5)
input$Score <- scoreRounded
}
addSentiScore <- function(sentiment) {
scoreRounded <- round(sentiment$Score, 5)
}
tf_idf_general(countWordsCellphone)
tf_idf_brand(countWordsCellBrand)
countWordsCellphone
tf_idf_general <- function(input) {
input %>%
bind_tf_idf(asin, reviewerID, word, n) %>%
arrange(desc(tf_idf))
}
tf_idf_general(countWordsCellphone)
tf_idf_brand(countWordsCellBrand)
score_cellphone <- read.csv("input-data/score_cellphone.csv", header = TRUE, sep = ";")
rm(score)
score_toast <- read.csv("input-data/score_toast.csv", header = TRUE, sep = ";")
head(score_cellphone)
merged_cellphone_branded$score <- addSentiScore(score_cellphone)
merged_cellphone_brand$score <- addSentiScore(score_cellphone)
merged_headphone_brand %>% select(overall, score)
merged_cellphone_brand %>% select(overall, score)
tokenizeReview <- function(input) {
input %>%
select(asin, overall, reviewTime, reviewerID, review, brand, price, title, score) %>%
unnest_tokens(word, review)
}
head(merged_cellphone_brand)
makeLow <- function(input) {
input$review <- sapply(input$review, tolower)
input$brand <- sapply(input$brand, tolower)
return(input)
}
merged_cellphone_brand <- makeLow(merged_cellphone_brand)
merged_coffee_brand <- makeLow(merged_coffee_brand)
merged_headphone_brand <- makeLow(merged_headphone_brand)
merged_toaster_brand <- makeLow(merged_toaster_brand)
merged_cellphone_brand$review <- correctContraction(merged_cellphone_brand$review, contraction_list)
merged_coffee_brand$review <- correctContraction(merged_coffee_brand$review, contraction_list)
merged_headphone_brand$review <- correctContraction(merged_headphone_brand$review, contraction_list)
merged_toaster_brand$review <- correctContraction(merged_toaster_brand$review, contraction_list)
prep_cellphone_brand$review <- lemmatizeText(merged_cellphone_brand$review)
prep_coffee_brand$review <- lemmatizeText(merged_coffee_brand$review)
prep_toaster_brand$review <- lemmatizeText(merged_toaster_brand$review)
prep_headphone_brand$review <- lemmatizeText(merged_headphone_brand$review)
?lemmatize_strings
library(textstem)
prep_cellphone_brand$review <- lemmatizeText(merged_cellphone_brand$review)
prep_coffee_brand$review <- lemmatizeText(merged_coffee_brand$review)
prep_toaster_brand$review <- lemmatizeText(merged_toaster_brand$review)
prep_headphone_brand$review <- lemmatizeText(merged_headphone_brand$review)
prep_cellphone_brand <- merged_cellphone_brand
prep_coffee_brand <- merged_coffee_brand
prep_toaster_brand  <- merged_toaster_brand
prep_headphone_brand  <- merged_headphone_brand
prep_cellphone_brand$review <- lemmatizeText(prep_cellphone_brand$review)
prep_coffee_brand$review <- lemmatizeText(prep_coffee_brand$review)
prep_toaster_brand$review <- lemmatizeText(prep_toaster_brand$review)
prep_headphone_brand$review <- lemmatizeText(prep_toaster_brand$review)
prep_headphone_brand$review <- lemmatizeText(prep_headphone_brand$review)
prep_headphone_brand  <- merged_headphone_brand
prep_headphone_brand$review <- lemmatizeText(prep_headphone_brand$review)
fwrite(prep_cellphone_brand, "input-data/prep_cellphone_brand.csv")
fwrite(prep_headphone_brand, "input-data/prep_headphone_brand.csv")
names(prep_toaster_brand)
names(prep_headphone_brand)
names(prep_cellphone_brand)
head(prep_cellphone_brand$score)
names(prep_toaster_brand)
prep_toaster_brand$score <- NULL
prep_toaster_brand$score <- prep_toaster_brand$scoreRound
prep_toaster_brand$scoreRound <- NULL
names(prep_toaster_brand)
head(prep_toaster_brand$score)
fwrite(prep_toaster_brand, "input-data/prep_toaster_brand.csv")
fwrite(prep_coffee_brand, "input-data/prep_coffee_brand.csv")
head(prep_coffee_brand$score)
names(prep_coffee_brand)
head(prep_coffee_brand$review)
names(prep_coffee_brand)
glimpse(prep_coffee_brand)
glimpse(prep_cellphone_brand)
prep_coffee_brand$score <- as.double(prep_coffee_brand$score)
prep_coffee_brand$score <- as.double(as.list(prep_coffee_brand$score))
as.double(prep_coffee_brand$score)
prep_coffee_brand$score <- round(score_coffee, 5)
fwrite(prep_coffee_brand, "input-data/prep_coffee_brand.csv")
glimpse(prep_coffee_brand)
prep_coffee_brand$score <- NULL
prep_coffee_brand$score <- round(score_coffee, 5)
fwrite(prep_coffee_brand, "input-data/prep_coffee_brand.csv")
str(score_coffee)
score_coffee <- as.list(score_coffee)
score_coffee <- as.data.frame(score_coffee)
names(prep_coffee_brand)
head(prep_coffee_brand$score)
prep_coffee_brand$score <- as.numeric(prep_coffee_brand$score)
score_coffee <- as.numeric(score_coffee)
glimpse(prep_coffee_brand)
prep_coffee_brand$score <- NULL
?cbind
as.vector(score_coffee)
typeof(score_coffee)
score_coffee <- as.vector(score_coffee)
names(prep_coffee_brand)
prep_coffee_brand$score <- score_coffee
glimpse(score_coffee)
glimpse(prep_coffee_brand$score)
fwrite(prep_coffee_brand, "input-data/prep_coffee_brand.csv")
glimpse(prep_coffee_brand)
glimpse(prep_headphone_brand)
glimpse(prep_cellphone_brand)
prep_coffee_brand$score <- addSentiScore(score_coffee)
fwrite(prep_coffee_brand, "input-data/prep_coffee_brand.csv")
glimpse(prep_toaster_brand)
glimpse(prep_cellphone_brand)
cor(prep_cellphone_brand$overall, prep_cellphone_brand$score)
cor(prep_toast_brand$overall, prep_toast_brand$score)
cor(prep_toaster_brand$overall, prep_toaster_brand$score)
cor(prep_coffee_brand$overall, prep_coffee_brand$score)
t.test(prep_coffee_brand$overall, prep_coffee_brand$score)
cor(prep_toaster_brand$overall, prep_toaster_brand$score)
cor(prep_coffee_brand$overall, prep_coffee_brand$score)
