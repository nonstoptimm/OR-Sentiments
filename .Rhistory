saveXG <- function(input, filename){
xgb.save(input, paste("output/", filename, sep=""))
}
saveXG(xgbHeadphone, "XG_Headphones1")
# Create Feature Importance Overview
xgbImpVar <- function(input, cols){
importance_vars <- xgb.importance(model = input, feature_names = colnames(cols))
return(importance_vars)
}
importanceHeadphone <- xgbImpVar(xgbHeadphone, xgbMTrainHeadphone)
fwrite(importanceHeadphone, "importanceHeadphone.csv")
# CLEAN FORMAT
xgbImpVarClean <- function(input){
importance_clean <- input[,`:=`(Cover=NULL, Frequency=NULL)]
return(importance_clean)
}
importanceHeadphone <- xgbImpVarClean(importanceHeadphone)
# PLOT IMPORTANCE
xgbPlot <- function(input, var){
xgb.ggplot.importance(importance_matrix = input, top_n = 20) +
# ggtitle(paste("Feature Importance for", var, sep=" ")) +
theme(text = element_text(size = 12, family = "LM Roman 10"))
}
xgbPlot(importanceHeadphone, "Headphone")
dev.off()
png("8_FeatureVerificationHeadphones.png", res = 300, units="in", width=7, height=4)
xgbPlot(importanceHeadphone, "Headphone")
importanceCellphone <- fread("importanceCellphone.csv")
fwrite(importanceHeadphone, "importanceHeadphoneClean.csv")
importanceCellphone <- fread("importanceCellphone.csv")
importanceCellphone
# Apply xgbImpVarClean-function
importanceCellphone <- xgbImpVarClean(importanceCellphone)
importanceCellphone
importanceCellphone
# CLEAN FORMAT
xgbImpVarClean <- function(input){
importance_clean <- input[,`:=`(Cover=NULL, Frequency=NULL)]
return(importance_clean)
}
# Apply xgbImpVarClean-function
importanceCellphone <- xgbImpVarClean(importanceCellphone)
rm(list=ls())
importanceCellphone <- fread("importanceHeadphone.csv")
# PLOT IMPORTANCE
xgbPlot <- function(input, var){
xgb.ggplot.importance(importance_matrix = input, top_n = 20) +
# ggtitle(paste("Feature Importance for", var, sep=" ")) +
theme(text = element_text(size = 12, family = "LM Roman 10"))
}
xgbPlot(importanceHeadphone, "Headphone")
importanceHeadphone <- fread("importanceHeadphone.csv")
# PLOT IMPORTANCE
xgbPlot <- function(input, var){
xgb.ggplot.importance(importance_matrix = input, top_n = 20) +
# ggtitle(paste("Feature Importance for", var, sep=" ")) +
theme(text = element_text(size = 12, family = "LM Roman 10"))
}
xgbPlot(importanceHeadphone, "Headphone")
png("8_FeatureVerificationHeadphones.png", res = 300, units="in", width=7, height=4)
xgbPlot(importanceHeadphone, "Headphone")
dev.off()
importanceCellphone <- fread("importanceCellphone.csv")
# CLEAN FORMAT
xgbImpVarClean <- function(input){
importance_clean <- input[,`:=`(Cover=NULL, Frequency=NULL)]
return(importance_clean)
}
# Apply xgbImpVarClean-function
importanceCellphone <- xgbImpVarClean(importanceCellphone)
importanceCellphone <- as.data.table(importanceCellphone)
# CLEAN FORMAT
xgbImpVarClean <- function(input){
importance_clean <- input[,`:=`(Cover=NULL, Frequency=NULL)]
return(importance_clean)
}
# Apply xgbImpVarClean-function
importanceCellphone <- xgbImpVarClean(importanceCellphone)
View(importanceCellphone)
prep_cellphone_brand <- as_tibble(fread("output/prep_cellphone_brand.csv"))
prep_headphone_brand  <- as_tibble(fread("output/prep_headphone_brand.csv"))
prep_toaster_brand  <- as_tibble(fread("output/prep_toaster_brand.csv"))
prep_coffee_brand <- as_tibble(fread("output/prep_coffee_brand.csv"))
library(dplyr)
library(ggplot2)
library(tidyr) # spread/gather/separate
library(tidytext) # unnest_tokens
# TOKENIZE THE INPUT DATA INTO BIGRAMS
tokenizeBigrams <- function(input) {
input %>%
# n = 2 means bigram
unnest_tokens(bigram, review, token = "ngrams", n = 2)
}
# Apply tokenizeBigrams-function
tokenized_headphone_bigram <- tokenizeBigrams(prep_headphone_brand)
tokenized_toaster_bigram <- tokenizeBigrams(prep_toaster_brand)
tokenized_cellphone_bigram <- tokenizeBigrams(prep_cellphone_brand)
tokenized_coffee_bigram <- tokenizeBigrams(prep_coffee_brand)
# SEPARATE BIGRAMS
# to be able to filter out the stopwords
separateBigrams <- function(input) {
input %>%
separate(bigram, c("w1", "w2"), sep = " ")
}
# Apply separateBigrams-function
tokenized_cellphone_bigram <- separateBigrams(tokenized_cellphone_bigram)
tokenized_toaster_bigram <- separateBigrams(tokenized_toaster_bigram)
tokenized_coffee_bigram <- separateBigrams(tokenized_coffee_bigram)
tokenized_headphone_bigram <- separateBigrams(tokenized_headphone_bigram)
# REMOVE STOPWORDS FROM BIGRAMS
filterBigrams <- function(input) {
input %>%
filter(!w1 %in% stop_words$word) %>%
filter(!w2 %in% stop_words$word)
}
# Apply filterBigrams-function
tokenized_headphone_bigram_filtered <- filterBigrams(tokenized_headphone_bigram)
tokenized_cellphone_bigram_filtered <- filterBigrams(tokenized_cellphone_bigram)
tokenized_coffee_bigram_filtered <- filterBigrams(tokenized_coffee_bigram)
tokenized_toaster_bigram_filtered <- filterBigrams(tokenized_toaster_bigram)
# UNITE THE WORDS / GLUE BACK TOGETHER
uniteBigrams <- function(input) {
input %>% unite(bigram, w1, w2, sep = " ")
}
# Apply uniteBigrams-function
tokenized_headphone_bigram_united <- uniteBigrams(tokenized_headphone_bigram_filtered)
tokenized_cellphone_bigram_united <- uniteBigrams(tokenized_cellphone_bigram_filtered)
tokenized_coffee_bigram_united <- uniteBigrams(tokenized_coffee_bigram_filtered)
tokenized_toaster_bigram_united <- uniteBigrams(tokenized_toaster_bigram_filtered)
# COUNTING WITHOUT STOPWORDS
# Apply countBigram-function again
countBigramCellphone <- countBigram(tokenized_cellphone_bigram_united)
countBigramHeadphone <- countBigram(tokenized_headphone_bigram_united)
countBigramToaster <- countBigram(tokenized_toaster_bigram_united)
countBigramCoffee <- countBigram(tokenized_coffee_bigram_united)
# FILTER FOR NEGATIONS
# Unfiltered dataset has to be used (with stopwords)
filterBigramNot <- function(input) {
input %>%
filter(w1 == "not") %>%
filter(!w2 %in% stop_words$word) %>%
count(w1, w2, sort = TRUE)
}
# Apply filterBigramNot-function
filterBigramNotCellphone <- filterBigramNot(tokenized_cellphone_bigram)
filterBigramNotCoffee <- filterBigramNot(tokenized_coffee_bigram)
filterBigramNotToaster <- filterBigramNot(tokenized_toaster_bigram)
filterBigramNotHeadphone <- filterBigramNot(tokenized_headphone_bigram)
# PLOT NEGATED TERMS, PRECEDED BY A "NOT"
plotNotWords <- function(input, text, selectBrand) {
if(selectBrand != "") { # if wanted, brand
bigrams <- input %>% filter(brand == selectBrand)
bigrams <- bigrams %>%
unnest_tokens(bigram, review, token = "ngrams", n = 2)
} else {
bigrams <- input %>%
unnest_tokens(bigram, review, token = "ngrams", n = 2)
}
category <- rep("cat", nrow(bigrams))
bigrams$cat <- category
bigrams %>%
count(cat, bigram, sort = TRUE) %>%
ungroup() %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(word1 %in% c("not")) %>%
count(word1, word2, wt = n, sort = TRUE) %>%
inner_join(get_sentiments("afinn"), by = c(word2 = "word")) %>%
mutate(contribution = score * nn) %>%
group_by(word1) %>%
top_n(10, abs(contribution)) %>%
ungroup() %>%
mutate(word2 = reorder(paste(word2, word1, sep = "__"), contribution)) %>%
ggplot(aes(word2, contribution, fill = contribution > 0)) +
geom_col(show.legend = FALSE) +
scale_fill_manual(values=c( "firebrick", "dodgerblue4")) +
scale_x_discrete(labels = function(x) gsub("__.+$", "", x)) +
xlab("Terms preceded by \"not\"") +
ylab("Sentiment Score * TF") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
coord_flip() +
#ggtitle(paste("Negate-Words for", text, sep = " ")) +
theme(text = element_text(size = 15, family = "LM Roman 10")) # Latex Font
}
# Apply plotNotWords-function
plotNotWords(prep_headphone_brand, "Headphones", "")
plotNotWords(prep_cellphone_brand, "Cellphones", "")
plotNotWords(prep_toaster_brand, "Toasters", "")
plotNotWords(prep_coffee_brand, "Coffee", "")
plotNotWords(prep_headphone_brand, "Headphones", "")
png("1.png", res = 300, units="in", width=7, height=4)
plotNotWords(prep_headphone_brand, "Headphones", "")
dev.off()
# Apply plotNotWords-function
png("1.png", res = 300, units="in", width = 6, height = 4)
plotNotWords(prep_headphone_brand, "Headphones", "")
dev.off()
# Apply plotNotWords-function
png("2.png", res = 300, units="in", width = 6, height = 4)
plotNotWords(prep_cellphone_brand, "Cellphones", "")
dev.off()
# Apply plotNotWords-function
png("3.png", res = 300, units="in", width = 6, height = 4)
plotNotWords(prep_toaster_brand, "Toasters", "")
dev.off()
# Apply plotNotWords-function
png("4.png", res = 300, units="in", width = 6, height = 4)
plotNotWords(prep_coffee_brand, "Coffee", "")
dev.off()
rm(list=ls())
# IMPORT PREPARED DATASET
prep_cellphone_brand <- as_tibble(fread("output/prep_cellphone_brand.csv"))
# GENERAL DATA IMPORT
# Import raw review data as well as prepared data
# dataImport.R
# Load required packages
library(dplyr)
library(data.table)
# IMPORT PREPARED DATASET
prep_cellphone_brand <- as_tibble(fread("output/prep_cellphone_brand.csv"))
brandList <- function(input){
list <- input %>%
select(brand) %>%
arrange(brand) %>%
distinct()
names(list) <- "word"
list <- as_tibble(list)
list$word <- as.character(list$word)
return(list)
}
# Apply brandList-function
brandListCellphone <- brandList(prep_cellphone_brand)
brandListHeadphone <- brandList(prep_headphone_brand)
brandListToaster <- brandList(prep_toaster_brand)
brandListCoffee <- brandList(prep_coffee_brand)
brandList <- function(input){
list <- input %>%
select(brand) %>%
arrange(brand) %>%
distinct()
names(list) <- "word"
list <- as_tibble(list)
list$word <- as.character(list$word)
return(list)
}
# Apply brandList-function
brandListCellphone <- brandList(prep_cellphone_brand)
tokenizeReview <- function(input) {
# Remove numbers
input$review <- gsub("[0-9]+", "", input$review)
input %>%
unnest_tokens(word, review)
}
# Apply dtm_wordByReview-function
tokenizedCellphone <- tokenizeReview(prep_cellphone_brand)
library(tidytext)
# Apply dtm_wordByReview-function
tokenizedCellphone <- tokenizeReview(prep_cellphone_brand)
# COUNT BY REVIEW
dtmWordCounts <- function(input, brandList) {
input %>%
anti_join(stop_words) %>%
anti_join(brandList) %>%
count(document, word, sort = TRUE) %>%
ungroup()
}
# Apply dtmWordCounts-function
wordCountsCellphone <- dtmWordCounts(tokenizedCellphone, brandListCellphone)
# CREATE DOCUMENT-TERM-MATRIX
dtmCreator <- function(input) {
input %>%
cast_dtm(document, word, n)
}
# Apply dtmCreator-function
dtmCellphone <- dtmCreator(wordCountsCellphone)
# REMOVE SPARSE TERMS
# If desired/necessary
# Highly recommended, makes it way more crispy clean
sparseDTM <- function(input, sparse){
input <- removeSparseTerms(input, sparse)
# Sum words in each review
rowSum <- apply(input, 1, sum)
# Delete all empty rows
input <- input[rowSum > 0, ]
return(input)
}
# Apply sparseDTM-function
dtmCellphone <- sparseDTM(dtmCellphone, 0.995)
# Apply sparseDTM-function
dtmCellphone <- sparseDTM(dtmCellphone, 0.995)
library(tm) # sparseterms
# Apply sparseDTM-function
dtmCellphone <- sparseDTM(dtmCellphone, 0.995)
# DETECT DOCUMENT ID ACTUALLY CONSIDERED
# Tidy back the sparsed dtm and extract docID, otherwise there would be issues
# Input must be (sparsed) dtm, which is going to be used for model training
detectDocument <- function(input){
tidied <- tidy(input)
tidied %>%
group_by(document) %>%
select(document) %>%
distinct() %>%
arrange(document)
}
docIDHeadphone <- detectDocument(dtmHeadphone)
# Apply detectDocument-function
docIDCellphone <- detectDocument(dtmCellphone)
?terms
history()
# MAIN TOPIC OF EACH DOCUMENT
# Probabilities associated with each topic assignment
aggrTopics <- function(input, ntopics){
# Extract Topic Probabilities
probs <- as.data.frame(input@gamma)
# Create topic names depending on the amount of topics
topNames <- paste("Topic", 1:ntopics, sep = "")
# Assign topic names
names(probs) <- topNames
# Extract Main Topics
main <- as.data.frame(topics(input))
main$document <- rownames(main)
# Remove Rownames
rownames(main) <- c()
# Add Proper Name
names(main) <- c("mainTopic", "document")
# Reorder, so that document ID comes first
main <- main[c("document", "mainTopic")]
# Merge together
merged <- cbind(main, probs)
return(merged)
}
?tidy
?tidyverse
library(tidyverse)
?tidyverse
?nest
?map
# IMPORT PREPARED DATASETS INCLUDING TOPIC SCORES
merged_topic_cellphone <- as_tibble(fread("output/DataWithTopic/mergedTopicCellphone.csv"))
merged_topic_headphone  <- as_tibble(fread("output/DataWithTopic/mergedTopicHeadphone.csv"))
# CREATE BOXPLOT FOR TOPIC-SENTIMENT
topicBoxplot <- function(input, category, topBrands, brandSelect, ylim){
input$mainTopic <- as.factor(input$mainTopic) # as factor for boxplot
if(brandSelect != "") {
properBrand <- topBrands %>% # as we want to have pretty names
filter(brand == brandSelect) %>%
select(properBrand)
input <- input %>%
filter(brand == brandSelect)
category <- paste(category, ' (Brand \"', properBrand, '\")', sep = "")
}
ggplot(input) +
aes(x = mainTopic, y = scoreNN) +
geom_boxplot() +
ggtitle(paste("Topic-oriented Sentiment-Scores for", category, sep = " ")) +
ylim(ylim)
}
# Apply topicBoxplot-function
topicBoxplot(merged_topic_cellphone, "Cellphones", "", "", c(-4.3,2.5))
topicBoxplot(merged_topic_headphone, "Headphones", "", "", c(-4.3,2.5))
# CREATE BOXPLOT FOR TOPIC-SENTIMENT
topicBoxplot <- function(input, category, topBrands, brandSelect, ylim){
input$mainTopic <- as.factor(input$mainTopic) # as factor for boxplot
if(brandSelect != "") {
properBrand <- topBrands %>% # as we want to have pretty names
filter(brand == brandSelect) %>%
select(properBrand)
input <- input %>%
filter(brand == brandSelect)
category <- paste(category, ' (Brand \"', properBrand, '\")', sep = "")
}
ggplot(input) +
aes(x = mainTopic, y = scoreNN) +
geom_boxplot() +
# ggtitle(paste("Topic-oriented Sentiment-Scores for", category, sep = " ")) +
theme(text = element_text(size = 12, family = "LM Roman 10")) +
ylim(ylim)
}
png("Headphones.png", res = 300, units="in", width=7, height=4)
# Apply topicBoxplot-function
topicBoxplot(merged_topic_cellphone, "Cellphones", "", "", c(-4.3,2.5))
dev.off()
# CREATE BOXPLOT FOR TOPIC-SENTIMENT
topicBoxplot <- function(input, category, topBrands, brandSelect, ylim){
input$mainTopic <- as.factor(input$mainTopic) # as factor for boxplot
if(brandSelect != "") {
properBrand <- topBrands %>% # as we want to have pretty names
filter(brand == brandSelect) %>%
select(properBrand)
input <- input %>%
filter(brand == brandSelect)
category <- paste(category, ' (Brand \"', properBrand, '\")', sep = "")
}
ggplot(input) +
aes(x = mainTopic, y = scoreNN) +
xlab("Main Topic") +
ylab("Sentiment Score (ML-based)") +
geom_boxplot() +
# ggtitle(paste("Topic-oriented Sentiment-Scores for", category, sep = " ")) +
theme(text = element_text(size = 12, family = "LM Roman 10")) +
ylim(ylim)
}
png("Headphones.png", res = 300, units="in", width=7, height=4)
topicBoxplot(merged_topic_headphone, "Headphones", "", "", c(-4.3,2.5))
dev.off()
png("Cellphones.png", res = 300, units="in", width=7, height=4)
# Apply topicBoxplot-function
topicBoxplot(merged_topic_cellphone, "Cellphones", "", "", c(-4.3,2.5))
dev.off()
# CREATE BOXPLOT FOR TOPIC-SENTIMENT
topicBoxplot <- function(input, category, topBrands, brandSelect, ylim){
input$mainTopic <- as.factor(input$mainTopic) # as factor for boxplot
if(brandSelect != "") {
properBrand <- topBrands %>% # as we want to have pretty names
filter(brand == brandSelect) %>%
select(properBrand)
input <- input %>%
filter(brand == brandSelect)
category <- paste(category, ' (Brand \"', properBrand, '\")', sep = "")
}
ggplot(input) +
aes(x = mainTopic, y = scoreNN) +
xlab("Main Topic") +
ylab("Sentiment Score (ML-based)") +
geom_boxplot() +
# ggtitle(paste("Topic-oriented Sentiment-Scores for", category, sep = " ")) +
theme(text = element_text(size = 15, family = "LM Roman 10")) +
ylim(ylim)
}
png("Cellphones.png", res = 300, units="in", width=7, height=4)
# Apply topicBoxplot-function
topicBoxplot(merged_topic_cellphone, "Cellphones", "", "", c(-4.3,2.5))
dev.off()
png("Headphones.png", res = 300, units="in", width=7, height=4)
topicBoxplot(merged_topic_headphone, "Headphones", "", "", c(-4.3,2.5))
dev.off()
# CREATE BOXPLOT FOR TOPIC-SENTIMENT
topicBoxplot <- function(input, category, topBrands, brandSelect, ylim){
input$mainTopic <- as.factor(input$mainTopic) # as factor for boxplot
if(brandSelect != "") {
properBrand <- topBrands %>% # as we want to have pretty names
filter(brand == brandSelect) %>%
select(properBrand)
input <- input %>%
filter(brand == brandSelect)
category <- paste(category, ' (Brand \"', properBrand, '\")', sep = "")
}
ggplot(input) +
aes(x = mainTopic, y = scoreNN) +
xlab("Main Topic") +
ylab("Sentiment Score (ML-based)") +
geom_boxplot() +
# ggtitle(paste("Topic-oriented Sentiment-Scores for", category, sep = " ")) +
theme(text = element_text(size = 15, family = "LM Roman 10")) +
scale_fill_manual(labels = labels) +
ylim(ylim)
}
# CREATE BOXPLOT FOR TOPIC-SENTIMENT
topicBoxplot <- function(input, category, topBrands, brandSelect, ylim, labels){
input$mainTopic <- as.factor(input$mainTopic) # as factor for boxplot
if(brandSelect != "") {
properBrand <- topBrands %>% # as we want to have pretty names
filter(brand == brandSelect) %>%
select(properBrand)
input <- input %>%
filter(brand == brandSelect)
category <- paste(category, ' (Brand \"', properBrand, '\")', sep = "")
}
ggplot(input) +
aes(x = mainTopic, y = scoreNN) +
xlab("Main Topic") +
ylab("Sentiment Score (ML-based)") +
geom_boxplot() +
# ggtitle(paste("Topic-oriented Sentiment-Scores for", category, sep = " ")) +
theme(text = element_text(size = 15, family = "LM Roman 10")) +
scale_fill_manual(labels = labels) +
ylim(ylim)
}
# Apply topicBoxplot-function
topicBoxplot(merged_topic_cellphone, "Cellphones", "", "", c(-4.3,2.5), c("a", "b", "c", "d", "e"))
# CREATE BOXPLOT FOR TOPIC-SENTIMENT
topicBoxplot <- function(input, category, topBrands, brandSelect, ylim, labels){
input$mainTopic <- as.factor(input$mainTopic) # as factor for boxplot
if(brandSelect != "") {
properBrand <- topBrands %>% # as we want to have pretty names
filter(brand == brandSelect) %>%
select(properBrand)
input <- input %>%
filter(brand == brandSelect)
category <- paste(category, ' (Brand \"', properBrand, '\")', sep = "")
}
ggplot(input) +
aes(x = mainTopic, y = scoreNN) +
xlab("Main Topic") +
ylab("Sentiment Score (ML-based)") +
geom_boxplot() +
# ggtitle(paste("Topic-oriented Sentiment-Scores for", category, sep = " ")) +
theme(text = element_text(size = 15, family = "LM Roman 10")) +
scale_x_discrete(labels = labels) +
ylim(ylim)
}
# Apply topicBoxplot-function
topicBoxplot(merged_topic_cellphone, "Cellphones", "", "", c(-4.3,2.5), c("a", "b", "c", "d", "e"))
# Apply topicBoxplot-function
topicBoxplot(merged_topic_cellphone, "Cellphones", "", "", c(-4.3,2.5), c("Purchase", "Software", "Hardware", "Brand", "Battery"))
topicBoxplot(merged_topic_headphone, "Headphones", "", "", c(-4.3,2.5), c("Hardware", "Purchase", "User Experience", "Brand", "Aesthetics"))
png("Headphones.png", res = 300, units="in", width=7, height=4)
topicBoxplot(merged_topic_headphone, "Headphones", "", "", c(-4.3,2.5), c("Hardware", "Purchase", "User Experience", "Brand", "Aesthetics"))
dev.off()
png("Cellphones.png", res = 300, units="in", width=7, height=4)
topicBoxplot(merged_topic_cellphone, "Cellphones", "", "", c(-4.3,2.5), c("Purchase", "Software", "Hardware", "Brand", "Battery"))
dev.off()
rm(list=ls())
